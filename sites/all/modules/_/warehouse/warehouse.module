<?php

define('DAY_STATUS_FREE', 'free');
define('DAY_STATUS_BUSY', 'busy');
define('DAY_STATUS_BUSY_SAME', 'busy-same');
define('DAY_STATUS_SELECTED', 'selected');
define('DAY_STATUS_UNAVAILABLE', 'unavailable');

define('HOUR_ADD_AVAILABLE_TILL', 15);                    // время текущего дня, до которого доступно добавления заявок на следующий день
define('HOUR_COMBINED_CARGO_ADD_AVAILABLE_TILL', 13);     // время текущего дня, до которого доступно добавления СБОРНЫХ заявок на следующий день
define('MINS_BEFORE_EDIT_ORDER_AVAILABLE', 180);          // кол-во минут до погрузки, до которого доступно редактирование накладной (для ТД - 60 мин)
define('MINS_BEFORE_EDIT_AVAILABLE', 30);                 // кол-во минут до погрузки, до которого доступно редактирование (добавление водителя)
define('MINS_BEFORE_DRIVER_MISSED', 180);                 // кол-во минут до погрузки, за которое уведомлять об отсутствии ДАННЫХ о водителе
define('MINS_BEFORE_REGISTER_LATE', 15);                  // кол-во минут до погрузки, за которое уведомлять об отсутствии РЕГИСТРАЦИИ водителя
define('MINS_BEFORE_ONLOAD_LATE', 10);                    // кол-во минут с  погрузки, после которого уведомлять об отсутствии водителя на ПОГРУЗКЕ
define('DEFAULT_CLIENT_LOADS_LIMIT', 5);                  // количество заявок в день для одной компании по умолчанию

/**
 * Implementation of hook_menu().
 */
function warehouse_menu()
{
  $items['warehouse/queue'] = array(
    'title' => 'Очередь погрузки',
    'page callback' => 'warehouse_queue_page',
    'access callback' => true,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_cron()
 */
function warehouse_cron()
{
  // выполнить импорт заявок
  if (variable_get('import_wh_1с_enable', 0)) {
    warehouse_process_incoming_files();
  }

  warehouse_check_missed_queues();
}

function warehouse_process_incoming_files()
{
  require_once 'includes/warehouse.import.inc';

  $directory = 'private://exchange/';

  // -- Заявки на Погрузку
  // получить список файлов по шаблону
  $mask = '/^wwork_import.*\.json/';
  $files = file_scan_directory($directory, $mask, ['recurse' => false], 0);

  // импортировать
  if ($files) {
    foreach($files as $file) {
      $array = drupal_json_decode(file_get_contents($file->uri));
      if (warehouse_wwork_import($array)) {
        $path = $directory . 'success/' . date('Y') . '/' . date('m') . '/' . date('d');
      } else {
        $path = $directory . 'fail/' . date('Y') . '/' . date('m') . '/' . date('d');
      }
      file_prepare_directory($path, FILE_CREATE_DIRECTORY);
      file_unmanaged_move($file->uri, $path . '/' . $file->filename);
    }
  }
}

/**
 * проверка просроченных заявок
 */
function warehouse_check_missed_queues()
{
  $timestamp_gmt = time() + 180*60;

  // список заявок с -35 мин до  +MINS_BEFORE_DRIVER_MISSED
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'warehouse_work')
    ->fieldCondition('field_wwork_time', 'value', [$timestamp_gmt-35*60, $timestamp_gmt+MINS_BEFORE_DRIVER_MISSED*60], 'BETWEEN')
    ->execute();

  if (!empty($result['warehouse_work'])) {
    foreach($result['warehouse_work'] as $wwork) {
      $wwork_wr = entity_metadata_wrapper('warehouse_work', $wwork->id);
      $wwork_time = $wwork_wr->field_wwork_time->value();
      $day_start = gmmktime(0, 0, 0, gmdate('n', $wwork_time), gmdate('j', $wwork_time), gmdate('Y', $wwork_time));
      $offset = $wwork_time - $day_start;
      $service = $wwork_wr->field_service->value() ? json_decode($wwork_wr->field_service->value(), true) : [];
      $service_old = $service;
      $user_wr = entity_metadata_wrapper('user', $wwork_wr->uid->value());
      $params = [
        'subject' => '',
        'wwork_time' => $wwork_time,
        'offset' => $offset,
        'datetime' => gmdate('d-m-Y H:i', $wwork_time),
        'note' => $wwork_wr->field_text->value(),
      ];

      // если уведомлять
      if ($user_wr->field_notify_query->value()) {
        // обязательно об отсутствии данных о водителе
        if (!$wwork_wr->field_driver->value()) {

          // письмо об отсутсвии данных о водителе (t-MINS_BEFORE_DRIVER_MISSED)
          if (empty($service['mail']['order_missed_info']) && $timestamp_gmt > $wwork_time - MINS_BEFORE_DRIVER_MISSED * 60) {
            // отправка
            $params['subject'] = 'Уведомление об отсутствии данных о водителе';
            $params['text'] = 'По одной из заявок отсутствуют данные о водителе.<br>До времени погрузки осталось менее 3х часов. Внесите данные до ' . gmdate('H', $params['wwork_time']-MINS_BEFORE_EDIT_AVAILABLE*60) . '<sup>' . gmdate('i', $params['wwork_time']-MINS_BEFORE_EDIT_AVAILABLE*60) . '</sup> или заявка может быть отменена.';
            $service['mail']['order_missed_info'] = 1;
          }

        } else {
          // если уведомлять сразу
          if (!$user_wr->field_notify_once_a_day->value()) {

            $params['driver'] = $wwork_wr->field_driver->field_truck_driver_surname->value() . ' ' . $wwork_wr->field_driver->field_truck_driver_name->value() . ($wwork_wr->field_driver->field_truck_driver_name2->value() ? ' ' . $wwork_wr->field_driver->field_truck_driver_name2->value() : '');
            $params['phone'] = $wwork_wr->field_driver->field_truck_driver_phone->value();
            $params['truck_number'] = $wwork_wr->field_truck_number->value();

            $checkin_time = $wwork_wr->field_checkin_time->value();
            $onload_time  = $wwork_wr->field_onload_time->value();

            // письмо об опоздании на регистрацию (t-MINS_BEFORE_REGISTER_LATE)
            if (!$checkin_time && empty($service['mail']['registration_late']) && $timestamp_gmt > $wwork_time - MINS_BEFORE_REGISTER_LATE*60) {
              // отправка
              $params['subject'] = 'Уведомление об опоздании на регистрацию';
              $params['text'] = 'По одной из заявок водитель не прошёл регистрацию.<br>До времени погрузки осталось менее ' . MINS_BEFORE_REGISTER_LATE . ' минут.';
              $service['mail']['registration_late'] = 1;
            }
            // письмо об опоздании на погрузку (t+MINS_BEFORE_ONLOAD_LATE)
            elseif (!$onload_time && empty($service['mail']['load_late']) && $timestamp_gmt > $wwork_time + MINS_BEFORE_ONLOAD_LATE*60) {
              // отправка
              $params['subject'] = 'Уведомление об опоздании на погрузку';
              $params['text'] = 'По одной из заявок водитель не подъехал на погрузку в течение ' . MINS_BEFORE_ONLOAD_LATE . ' минут от назначенного времени.';
              $service['mail']['load_late'] = 1;
            }
            // письмо о пропуске погрузки (t+30)
            elseif (!$onload_time && empty($service['mail']['load_missed']) && $timestamp_gmt >= $wwork_time + 30 * 60) {
              // отправка
              $params['subject'] = 'Уведомление о пропуске погрузки';
              $params['text'] = 'По одной из заявок водитель пропустил погрузку.';
              $service['mail']['load_missed'] = 1;
            }
          }
        }

        if ($service != $service_old) {
          if ($params['subject']) {
            drupal_mail('mailer', 'client_notify_wwork_fail', $user_wr->mail->value(), user_preferred_language($user_wr->value()), $params);
          }
          $wwork_wr->field_service = json_encode($service);
          $wwork_wr->save();
        }
      }
    }
  }


}

/**
 * Implementation of hook_menu_alter().
 */
//function warehouse_menu_alter(&$items)
//{
//  // заменить callback автокомплита на свой, чтобы изменить подбор из справочника Водителей
//  if (isset($items['inline_entity_form/autocomplete'])) {
//    $items['inline_entity_form/autocomplete']['page callback'] = 'warehouse_inline_entity_form_autocomplete';
//  }
//}

//function warehouse_inline_entity_form_autocomplete($entity_type, $field_name, $bundle, $string = '')
//{
//  // для водителей вывести только при вводе удостоверения полностью
//  $string = str_replace('_', '', $string);
//    if ($field_name == 'field_driver' && $bundle == 'warehouse_work' && strlen($string) < 4) {
//    drupal_json_output([]);
//  } else {
//    inline_entity_form_autocomplete($entity_type, $field_name, $bundle, $string);
//  }
//}

/**
 *
 */
function warehouse_queue_page()
{
  $month = isset($_GET['month']) ? $_GET['month'] : null;
  $day = isset($_GET['day']) ? $_GET['day'] : null;
  $offset = isset($_GET['offset']) ? $_GET['offset'] : null;
  $year = isset($_GET['year']) ? $_GET['year'] : null;

  if ($month == null) {
    $day_start = gmmktime(0, 0, 0, date('m'), date('j')+1, date('Y'));
    $year = date('Y', $day_start);
    $month = date('m', $day_start);
    $day = date('j', $day_start);
  }

  return warehouse_calendar_template($month, $day, $offset, $year);
}

/**
 *
 */
function warehouse_calendar_template($month = null, $day = null, $offset = null, $year = 2021, $is_form = false)
{
  //  $current_path = strpos($_GET['q'], 'system/ajax') === false ? $_GET['q'] : 'warehouse/queue';
  $current_path = 'warehouse/queue';

  if (empty($day)) $day = 1;
  $selected_day_start = gmmktime(0, 0, 0, $month, $day, $year);
  $is_selected_day_weekend = warehouse_is_date_weekend($selected_day_start);
  if ($is_selected_day_weekend) $day = 1;
  while (warehouse_is_date_weekend($selected_day_start)) {
    $day++;
    $selected_day_start = gmmktime(0, 0, 0, $month, $day, $year);
    $offset = null;
  }
  $timestamp_gmt = time() + 180*60;

  // - календарь
  $calendar = $time_list = '';
  $calendar_arr = warehouse_get_month_dates($month, $year);
  foreach ($calendar_arr as $day_arr) {
    if ($day_arr['day'] > 0) {
      $day_arr['day'] = $day_arr['day'] < 10 ? '0' . $day_arr['day'] : $day_arr['day'];
      $day_start = gmmktime(0, 0, 0, $month, $day_arr['day'], $year);
      $busyness = $day_arr['wwork_qty'] * 100/16;
      // при занятости дня менее 50% выделить зелёным цветом, более - жёлтым, выходной красным
      $day_color = $day_arr['is_weekend'] ? ' color-wend' : (_warehouse_is_cargo_add_allowed($year, $month, $day_arr['day']) ? ($busyness <= 50 ? ' color-free' : ' color-lack') : ' color-off');
      $day_active =  $day_arr['day'] == $day ? ' active' : '';
      $calendar .=
        '<li class="day' . $day_color . $day_active . '" data-date="' . $day_start . '">' .
          ($day_arr['day'] > 0 ? ($day_arr['is_weekend'] ? '<div class="day-content">' . $day_arr['day'] . '</div>' : '<a href="/' . $current_path . '?month=' . $month . '&day=' . $day_arr['day'] . '&year=' . $year . '" class="day-content">' . $day_arr['day'] . '</a>') : '') .
          '<div class="busyness-same' . ($day_arr['busy_same'] ? ' busy' : '') . '"></div>' .
          '<div class="busyness"></div>' .
        '</li>';

    } else {
      $calendar .=
        '<li class="day"></li>';
    }
  }

  // - расписание
  $schedule = warehouse_get_day_schedule($month, $day, $year);
  $shedule_current_offset = null;
  foreach($schedule as $key => $time) {
    if (in_array($key, [420, 780, 960])) {
      $time_list .= '<div class="col">';

      if ($key == 960) {
        $time_list .= '<div class="time-title half">доп</div>';
      } else {
        $time_list .= '<div class="time-title quarter">осн</div><div class="time-title quarter">рез</div>';
      }
    }
    $classes = $time['status'] . ($time['offset'] == $offset ? ' active' : '');
    $title = '';
    if (isset($time['load']->status)) {
      $classes .= ' ' . $time['load']->status;
      $title = warehouse_get_text_for_driver_status($time['load']->status);
    }
    $time_list .= '<div class="time ' . (isset($time['duration']) && $time['duration'] == 15 ? 'quarter' : 'half') . '" data-start-offset="' . $time['offset'] . '">' .
                (in_array($time['status'], [DAY_STATUS_UNAVAILABLE, DAY_STATUS_BUSY]) || ($is_form && $time['status'] == DAY_STATUS_BUSY_SAME) ? '<div class="time-content ' . $classes . '">' . $time['text'] . '</div> ' : '<a href="/' . $current_path . '?year=' . $year . '&month=' . $month . '&day=' . $day . '&offset=' . $time['offset'] . '" class="time-content ' . $classes . '" title="' . $title . '">' . $time['text'] . '</a>') .
              '</div>';
    if (in_array($key, [705, 945, 1080])) {
      $time_list .= '</div>';
    }

    if ($offset && $time['offset'] == $offset && $time['load']) {
      $shedule_current_offset = $time['offset'];
    }
  }

  $month_prev = $month-1; $year_prev = $year;
  $month_next = $month+1; $year_next = $year;
  if ($month == 1) {
    $month_prev = 12; $year_prev = $year - 1;
  }
  if ($month == 12) {
    $month_next = 1; $year_next = $year + 1;
  }

  $output = '<div class="warehouse">';
  $output.= '<div class="conditions"><ul>' .
            '<li>Дополнительное время (доп) с 16<sup>00</sup> до 18<sup>00</sup> открывается после заполнения основного (осн) времени</li>' .
            '<li>Резервное время (рез) открывается после заполнения дополнительного</li>' .
            '<li>Добавление погрузки на следующий день возможно до ' . HOUR_ADD_AVAILABLE_TILL . '<sup>00</sup> текущего дня</li>' .
            '</ul></div>';
  $output .=  '<div class="calendar">' .
                '<h3>' .
                    '<span><a href="/' . $current_path . '?month=' . $month_prev . ($day ? '&day=' . $day : '') . '&year=' . $year_prev . '" class="btn btn-link">предыдущий</a></span>' .
                    '<span>' . t(date('F', $selected_day_start)) . ' ' . date('Y', $selected_day_start) . '</span>' .
                    '<span><a href="/' . $current_path . '?month=' . $month_next . ($day ? '&day=' . $day : '') . '&year=' . $year_next . '" class="btn btn-link">следующий</a></span>' .
                '</h3>' .
                '<div class="wday">пн</div>' .
                '<div class="wday">вт</div>' .
                '<div class="wday">ср</div>' .
                '<div class="wday">чт</div>' .
                '<div class="wday">пт</div>' .
                '<div class="wday color-wend">сб</div>' .
                '<div class="wday color-wend">вс</div>' .
                '<ul class="days">' .
                  $calendar .
                '</ul>' .
                (user_has_role(ROLE_MANAGER_WAREHOUSE) ? '<div class="edit-weekends"><span class="glyphicon glyphicon-calendar"></span> <a href="/weekends?field_date_value[value][month]=' . $month . '&field_date_value[value][year]=' . $year . '">редактировать выходные дни</a></div>' : '') .
              '</div>';
  if (!empty($day)) {
    $output .=  '<div class="schedule">' .
                  '<h3>Расписание</h3>' .
                  '<div class="time-list">' .
                    $time_list .
                  '</div>' .
                  '<div class="schedule-legend">' .
                    '<div><span class="free"></span>- время свободно</div>' .
                    '<div><span class="busy"></span>- время занято</div>' .
                    '<div><span class="unavailable"></span>- время недоступно</div>' .
                    '<div><span class="busy-same"></span>- время занято вашей компанией</div>' .
                    '<div><span class="selected"></span>- выбранное время</div>' .
                  '</div>' .
                '</div>';
  }

  if (!$is_form) {
    $output .=  '<div class="description">' .
                '<h3>Задание на погрузку</h3>';

    if (!empty($day)) {
      // проверить, возможно клиент уже выбрал квоту погрузок на день (по умолчанию - DEFAULT_CLIENT_LOADS_LIMIT)
      $company_wwork_limit = DEFAULT_CLIENT_LOADS_LIMIT;
      if ($company = ext_user_get_company_by_user()) {
        $company_wwork_limit = $company['wwork_limit'];
      }
      $is_add_allowed = $calendar_arr[(int)$day]['wwork_qty_own'] < $company_wwork_limit;
      $add_not_allowed_text = 'Вы уже выбрали квоту погрузок на этот день. Добавить сверх квоты можно в течение суток перед погрузкой при наличии свободных мест.<br>Также вы можете запланировать их на другой день.';

      // если квота выбрана, но остались сутки, то можно добавлять
      if (!$is_add_allowed) {
        if ($selected_day_start - $timestamp_gmt < (24*60*60 + (24-HOUR_ADD_AVAILABLE_TILL)*60*60)) $is_add_allowed = true;
      }

      // менеджерам добавление недоступно
      if (user_has_role(ROLE_MANAGER_WAREHOUSE)) {
        $is_add_allowed = false;
        $add_not_allowed_text = 'Добавление погрузок в кабинете менеджера недоступно.';
      }

      // возможно добавление на этот день недоступно
      if (!_warehouse_is_cargo_add_allowed($year, $month, $day)) {
        $is_add_allowed = false;
        $add_not_allowed_text = 'Добавление погрузок на текущую дату недоступно.';
      }

      if ($is_add_allowed && !$offset) {
        $add_not_allowed_text = 'Для добавления погрузки выберите время в расписании.';
      }

      // добавление сборных грузов недоступно реньше, чем обычных грузов ( с HOUR_COMBINED_CARGO_ADD_AVAILABLE_TILL вместо HOUR_ADD_AVAILABLE_TILL)
      $is_combined_cargo_add_allowed = false;
      if ($is_add_allowed) {
        $is_combined_cargo_add_allowed = _warehouse_is_combined_cargo_add_allowed($year, $month, $day);
      }

      // текстовое сообщение менеджеру, если водитель опаздывает или пропустил погрузку (статус late или missed)
      $status_message = '';
      if (isset($schedule[$shedule_current_offset]['load']->status)) {
        $status_message = warehouse_get_text_for_driver_status($schedule[$shedule_current_offset]['load']->status);
      }

      if ($shedule_current_offset) {
        // ссылка на накладную
        $file = file_load($schedule[$shedule_current_offset]['load']->fid);
        $uri = $file->uri;
        $url = file_create_url($uri);

        // редактировать и отменять можно, если до погрузки более MINS_BEFORE_EDIT_AVAILABLE минут
        $is_edit_allowed = ($schedule[$shedule_current_offset]['load']->time - $timestamp_gmt > MINS_BEFORE_EDIT_AVAILABLE*60) || user_has_role(ROLE_MANAGER_WAREHOUSE);
        $is_cancel_allowed = ($schedule[$shedule_current_offset]['load']->time - $timestamp_gmt > MINS_BEFORE_EDIT_AVAILABLE*60) || user_has_role(ROLE_MANAGER_WAREHOUSE);

        $onload = $gone = null;
        $checkin = $schedule[$shedule_current_offset]['load']->checkin_time ?  date('d.m.Y H:i', $schedule[$shedule_current_offset]['load']->checkin_time-180*60) : $status_message;
        if ($schedule[$shedule_current_offset]['load']->checkin_time && $timestamp_gmt > $schedule[$shedule_current_offset]['load']->time) {
          $onload = $schedule[$shedule_current_offset]['load']->onload_time ?  date('d.m.Y H:i', $schedule[$shedule_current_offset]['load']->onload_time-180*60) : $status_message;
        }
        if ($schedule[$shedule_current_offset]['load']->onload_time) {
          $gone = $schedule[$shedule_current_offset]['load']->gone_time ?  date('d.m.Y H:i', $schedule[$shedule_current_offset]['load']->gone_time-180*60) : $status_message;
        }
        $output .=  '<div class="wwork-item ' . $schedule[$shedule_current_offset]['load']->status . '" data-wwork-id="' . $schedule[$shedule_current_offset]['load']->id . '">' .
                        '<div>' .
                          '<div class="field-item field-wwork-order">' .
                            '<span class="field-label">Накладная</span>' .
                            '<div class="field-content"><a href="'. $url .'" target="_blank">открыть</a></div>' .
                          '</div>' .
                          '<div class="field-item field-combined-cargo">' .
                            '<span class="field-label">Сборный груз</span>' .
                            '<div class="field-content">'. ($schedule[$shedule_current_offset]['load']->combined_cargo ? 'да' : 'нет') . '</div>' .
                          '</div>' .
                          '<div class="field-item field-note">' .
                            '<span class="field-label">Пометки</span>' .
                            '<div class="field-content">'. ($schedule[$shedule_current_offset]['load']->note ? $schedule[$shedule_current_offset]['load']->note : '-') . '</div>' .
                          '</div>' .
                          '<div class="field-item field-status">' .
                            '<span class="field-label">Статус</span>' .
                            '<div class="field-content">'. warehouse_get_text_for_order_status($schedule[$shedule_current_offset]['load']->status) . '</div>' .
                          '</div>' .
                        '</div>' .
                        '<div>' .
                          '<div class="field-item field-truck-number">' .
                            '<span class="field-label">№ автомобиля</span>' .
                            '<div class="field-content">'. ($schedule[$shedule_current_offset]['load']->truck_number ? $schedule[$shedule_current_offset]['load']->truck_number : '-') . '</div>'.
                          '</div>' .
                          '<div class="field-item field-truck-driver">' .
                            '<span class="field-label">Водитель</span>' .
                            '<div class="field-content">'. ($schedule[$shedule_current_offset]['load']->truck_driver ? $schedule[$shedule_current_offset]['load']->truck_driver : '-') . '</div>'.
                          '</div>' .
                          '<div class="field-item field-time">' .
                          ($checkin ?
                            '<span class="field-label">Регистрация</span>' .
                            '<div class="field-content">'. $checkin . '</div>'
                            : '') .
                          '</div>' .
                          '<div class="field-item field-time">' .
                          ($onload ?
                            '<span class="field-label">Въезд</span>' .
                            '<div class="field-content">'. $onload . '</div>'
                          : '') .
                          '</div>' .
                          '<div class="field-item field-time">' .
                          ($gone ?
                            '<span class="field-label">Выезд</span>' .
                            '<div class="field-content">'. $gone . '</div>'
                            : '') .
                          '</div>' .
                        '</div>' .
                         '<div class="field-actions">' .
                          ($is_cancel_allowed ? '<a href="/admin/structure/entity-type/warehouse_work/warehouse_work/' . $schedule[$shedule_current_offset]['load']->id . '/delete' . '?month=' . $month . '&day=' . $day . '&year=' . $year . '&offset=' . $offset . '" class="btn btn-danger btn-xs">Удалить</a>' : '') .
                          ($is_edit_allowed ? '<a href="/admin/structure/entity-type/warehouse_work/warehouse_work/' . $schedule[$shedule_current_offset]['load']->id . '/edit" class="btn btn-primary btn-xs">Редактировать</a>' : '') .
                        '</div>' .
                      '</div>' .
                    '</div>';
      } else {
        $output .= '<div class="add-actions">';
        $output .= $is_add_allowed && $offset ?
          '<p>Подготовка сборного груза требует перепаллетирования и поэтому занимает больше времени. При планировании на следующий день, заявка на погрузку, состоящая только из целых паллет ' .
          'подаётся до ' . HOUR_ADD_AVAILABLE_TILL . '<sup>00</sup> текущего, а заявка, требующая подготовки и перепаллетирования, до ' . HOUR_COMBINED_CARGO_ADD_AVAILABLE_TILL . '<sup>00</sup>.'.
          '</p>' .
          '<div>' .
            '<div>' .
              '<a href="/admin/structure/entity-type/warehouse_work/warehouse_work/add?month=' . $month . '&day=' . $day . '&offset=' . $offset . '&year=' . $year . '" class="btn btn-primary add-wwork">Добавить погрузку</a>' .
              '<p>Добавление на следующий день доступно до ' . HOUR_ADD_AVAILABLE_TILL . '<sup>00</sup> текущего.</p>' .
            '</div>' .
            '<div>' .
              '<a href="/admin/structure/entity-type/warehouse_work/warehouse_work/add?month=' . $month . '&day=' . $day . '&offset=' . $offset . '&year=' . $year . '&complex_cargo=1" class="btn btn-primary add-wwork"' . ($is_combined_cargo_add_allowed ? '' : ' disabled="disabled"') . '>Добавить сборную погрузку</a>' .
              '<p>Добавление на следующий день доступно до ' . HOUR_COMBINED_CARGO_ADD_AVAILABLE_TILL . '<sup>00</sup> текущего.</p>' .
            '</div>' .

          '</div>'
          : $add_not_allowed_text ;

        $output .= '</div>';
      }
    } else {
        $output .= '<p>Выберите дату</p>';
    }
    $output .= '</div>';
  }

  return $output;
}

/**
 * hook_form_alter
 * форма добавления ПОГРУЗКИ
 */
function warehouse_form_alter(&$form, &$form_state, $form_id)
{
  if ($form_id == 'eck__entity__form_add_warehouse_work_warehouse_work' || $form_id == 'eck__entity__form_edit_warehouse_work_warehouse_work') {
    if (!user_has_role(ROLE_ADMIN)) {
      if ($form_id == 'eck__entity__form_edit_warehouse_work_warehouse_work') {
        $wwork_time_unix = $form["field_wwork_time"]["und"][0]["#entity"]->field_wwork_time["und"][0]["value"];
        $form_state['date']['month'] = gmdate('n', $wwork_time_unix);
        $form_state['date']['day'] = gmdate('j', $wwork_time_unix);
        $form_state['date']['year'] = gmdate('Y', $wwork_time_unix);

        $day_start = gmmktime(0, 0, 0, gmdate('n', $wwork_time_unix), gmdate('j', $wwork_time_unix), gmdate('Y', $wwork_time_unix));
        $form_state['date']['offset'] = ($wwork_time_unix - $day_start)/60;
      } else {
        if (isset($_GET['month']))  $form_state['date']['month'] = $_GET['month'];
        if (isset($_GET['day']))    $form_state['date']['day'] = $_GET['day'];
        if (isset($_GET['offset'])) $form_state['date']['offset'] = $_GET['offset'];
        if (isset($_GET['year']))   $form_state['date']['year'] = $_GET['year'];
        if (isset($_GET['complex_cargo']) && _warehouse_is_combined_cargo_add_allowed($form_state['date']['year'], $form_state['date']['month'], $form_state['date']['day'])) $form_state['complex_cargo'] = $_GET['complex_cargo'];
      }

      if (!user_has_role(ROLE_MANAGER_WAREHOUSE)) {
        $form["field_wwork_time"]['#access'] = false;
      } else {
        // для менеджера подключаем виджет выбора даты-времени
        // https://xdan.ru/samij-udobnij-datetimepicker.html
        // версия js из статьи выдавала ошибку,
        // поэтому взят файл из https://github.com/xdan/datetimepicker/issues/471
        $form['#attached']['css'][] = drupal_get_path('module', 'warehouse') . '/css/jquery.datetimepicker.css';
        $form['#attached']['js'][] = drupal_get_path('module', 'warehouse') . '/js/jquery.datetimepicker.js';
      }

      $offset = null;
      $year = date('Y');
      $month = date('n');
      $day = date('j')+1;
      if (!empty($form_state['date'])) {
        $year = $form_state['date']['year'];
        $month = $form_state['date']['month'];
        $day = $form_state['date']['day'];
        $offset = empty($form_state['date']['offset']) ? null : $form_state['date']['offset'];
      }

      $form['actions']['back'] = [
        '#markup' => '<a href="/warehouse/queue?month=' . $month . '&day=' . $day . '&offset=' . $offset . '&year=' . $year . '" class="btn btn-link">отменить</a>',
        '#weight' => 10002,
      ];

      $form['calendar'] = [
        '#markup' => warehouse_calendar_template($month, $day, $offset, $year, true),
        '#weight' => -1,
      ];

      // выбранное в календаре и расписании время погрузки
      $form['time'] = [
        '#type' => 'hidden',
        '#value' => $month && $day && $offset ? gmmktime(0, 0, 0, $month, $day, $year) + $offset * 60 : 0,
      ];

      // иностранные номера вводятся без шаблона
      $form['foreign'] = [
        '#type' => 'checkbox',
        '#title' => 'иностранные номера',
        '#default_value' => 0,
        '#weight' => -1,
      ];
      array_unshift($form["#groups"]["group_truck"]->children, 'foreign');
      $form["#group_children"]["foreign"] = 'group_truck';

      array_unshift($form["#validate"], 'warehouse_eck__entity__form_warehouse_work_warehouse_work_validate');
      $form["actions"]["submit"]["#submit"][] = 'warehouse_eck__entity__form_add_warehouse_work_warehouse_work_submit';


      // cargo
      $form["field_combined_cargo"]["#access"] = false;
      if (isset($form_state['complex_cargo'])) {
        $form["field_combined_cargo"]["und"]["#default_value"] = $form_state['complex_cargo'];
      }
      if (!$form["field_combined_cargo"]["und"]["#default_value"] && !user_has_role(ROLE_MANAGER_WAREHOUSE)) {
          $form["field_file_wwork_order"]["und"][0]["#description"] = '<span class="text-danger">ВНИМАНИЕ!</span> Вы оформляете погрузку не предусматривающую переупаковку груза. Прикрепление несоответствующей накладной может привести к отмене или переносу времени погрузки';
      }


      // оформление
      $form['#attributes']['class'][] = 'warehouse-form';
      $form['#attached']['css'][] = drupal_get_path('module', 'warehouse') . '/css/warehouse.css';
      $form['#attached']['js'][] = drupal_get_path('module', 'warehouse') . '/js/warehouse.js';


      $form["field_file_wwork_order"]["#prefix"] = '<div class="row">';
      $form["field_file_wwork_order"]["#attributes"]["class"][] = 'col-sm-6';
      $form["field_text"]["#attributes"]["class"][] = 'col-sm-6';
      $form["field_text"]["#suffix"] = '</div>';

      $form["field_driver"]["#prefix"] = '<div class="row">';
      if (isset($form["field_driver"]["und"]["#title"])) $form["field_driver"]["und"]["#title"] = '';
      if (isset($form["field_driver"]["und"]["form"]["#title"])) {
        $form["#groups"]["group_driver"]->label = $form["field_driver"]["und"]["form"]["#title"];
        $form["field_driver"]["und"]["form"]["#title"] = '';
      }

      $form["field_driver"]["#attributes"]["class"][] = 'col-sm-8';
      $form["field_file_driver_proxy"]["#attributes"]["class"][] = 'col-sm-4';
      $form["field_file_driver_proxy"]["#suffix"] = '</div>';


      $form["field_truck_number"]["#prefix"] = '<div class="row">';
      $form["field_truck_number"]["#attributes"]["class"][] = 'col-sm-2';
      $form["field_truck_region"]["#attributes"]["class"][] = 'col-sm-1';
      $form["field_truck_brand"]["#attributes"]["class"][] = 'col-sm-3';
      $form["field_truck_trailer_number"]["#attributes"]["class"][] = 'col-sm-3';
      $form["field_truck_trailer_type"]["#attributes"]["class"][] = 'col-sm-3';
      $form["field_truck_trailer_type"]["#suffix"] = '</div>';

      // скрыть служебные поле
      $form['field_service']["#access"] = false;
      if (isset($form["field_company"]["#access"])) $form["field_company"]["#access"] = false; // уст.
      $form["field_client"]["#access"] = false;
      $form["field_checkin_time"]["#access"] = false;
      $form["field_onload_time"]["#access"] = false;
      $form["field_gone_time"]["#access"] = false;
      $form["field_processing"]["#access"] = false;
      $form["field_cancel_reason"]["#access"] = false;

      $company = ext_user_get_company_by_user();

      if ($form_id == 'eck__entity__form_add_warehouse_work_warehouse_work') {
        if (empty($form_state['date']['complex_cargo'])) {
          drupal_set_title('Добавление погрузки');
        } else {
          drupal_set_title('Добавление сборной погрузки');
        }
        // указываем компанию клиента

        $form["field_client"]["und"]["#default_value"] = $company['id'];
      }
      if ($form_id == 'eck__entity__form_edit_warehouse_work_warehouse_work') {
        if ($form["field_combined_cargo"]["und"]["#default_value"]) {
          drupal_set_title('Добавление сборной погрузки');
        } else {
          drupal_set_title('Редактирование погрузки');
        }
        // погрузочный лист не даём менять,
        // если заблокировано или осталось менее MINS_BEFORE_EDIT_ORDER_AVAILABLE минут
        // или менее одного часа для Торгового Дома
        $timestamp_gmt = time() + 180*60;
        if (!empty($form["entity"]["#value"]->field_processing["und"][0]["value"]
          || $timestamp_gmt > $wwork_time_unix - MINS_BEFORE_EDIT_ORDER_AVAILABLE*60*60)
          || ($company['id'] == COMPANY_TD && $timestamp_gmt > $wwork_time_unix - 1*60*60)) {
          $form["field_file_wwork_order"]['#disabled'] = true;
          $form["field_file_wwork_order"]["und"][0]["#description"] = '<span class="text-danger">ВНИМАНИЕ!</span> Заявка уже обрабатывается и накладная может быть изменена только по согласованию со складом.';
        }
      }

      // изменения в блоке водителя
      if (isset($form["field_driver"]["und"]["entities"][0]["actions"]["ief_entity_remove"])) {
        $form["field_driver"]["und"]["entities"][0]["actions"]["ief_entity_remove"]["#value"] = 'Убрать из заявки';
      }

      // изменения в форме удаления водителя
      if (isset($form["field_driver"]["und"]["entities"][0]["form"]["#op"]) && $form["field_driver"]["und"]["entities"][0]["form"]["#op"] == 'remove') {
        $form["field_driver"]["und"]["entities"][0]["form"]["message"]["#markup"] = str_replace('<div>', '<div class="form-group">', $form["field_driver"]["und"]["entities"][0]["form"]["message"]["#markup"]);
        $form["field_driver"]["und"]["entities"][0]["form"]["actions"]["ief_remove_cancel"]["#attributes"]["class"][] = 'btn-link';
        $form["field_driver"]["und"]["entities"][0]["form"]["actions"]["ief_remove_cancel"]["#value"] = 'вернуться';
        $form["field_driver"]["und"]["entities"][0]["form"]["actions"]["ief_remove_confirm"]["#value"] = 'Убрать из заявки';
      }
    }
  }

  if ($form_id == 'eck__entity__delete_form') {
    $form["actions"]["cancel"]["#title"] = 'отменить';
    $form["actions"]["cancel"]["#attributes"]["class"][] = 'btn';
    $form["actions"]["cancel"]["#attributes"]["class"][] = 'btn-link';
    $form["actions"]["cancel"]["#href"] = 'warehouse/queue';
    $form["submit_redirect"]["#value"] = 'warehouse/queue';
  }
}

function warehouse_inline_entity_form_reference_form_alter(&$entity_form, &$form_state)
{
  $entity_form["entity_id"]["#title"] = 'Водительское удостоверение или фамилия';

  $entity_form["actions"]["ief_reference_save"]["#value"] = 'Выбрать водителя';
  $entity_form["actions"]["ief_reference_cancel"]["#attributes"]["class"][] = 'btn-link';
  $entity_form["actions"]["ief_reference_cancel"]["#value"] = 'убрать из заявки';
}

function warehouse_inline_entity_form_entity_form_alter(&$entity_form, &$form_state)
{
  $entity_form["name"]["#access"] = false;
  $entity_form["description"]["#access"] = false;
  if (isset($entity_form["field_contractor"]["#access"])) $entity_form["field_contractor"]["#access"] = false; // уст.
  $entity_form["field_client"]["#access"] = false;

  ;
  if ($company = ext_user_get_company_by_user()) {
    $entity_form["field_client"]["und"]["#default_value"] = $company['id'];
  }

  // оформление
  $entity_form["field_truck_driver_license"]["#prefix"] = '<div class="row">';
  $entity_form["field_truck_driver_license"]["#attributes"]["class"][] = 'col-sm-3';
  $entity_form["field_truck_driver_surname"]["#attributes"]["class"][] = 'col-sm-3';
  $entity_form["field_truck_driver_name"]["#attributes"]["class"][] = 'col-sm-3';
  $entity_form["field_truck_driver_name2"]["#attributes"]["class"][] = 'col-sm-3';
  $entity_form["field_truck_driver_phone"]["#attributes"]["class"][] = 'col-sm-3';
  $entity_form["field_dopog_license"]["#attributes"]["class"][] = 'col-sm-3';
  $entity_form["field_dopog_license_validity"]["#attributes"]["class"][] = 'col-sm-3';
  $entity_form["field_truck_driver_phone"]["#suffix"] = '</div>';

  if ($entity_form["#op"] == 'add') {
    $entity_form["actions"]["ief_add_save"]["#value"] = 'Сохранить водителя';
    $entity_form["actions"]["ief_add_cancel"]["#attributes"]["class"][] = 'btn-link';
    $entity_form["actions"]["ief_add_cancel"]["#value"] = 'отменить';
  }
  if ($entity_form["#op"] == 'edit') {
    $entity_form["actions"]["ief_edit_save"]["#value"] = 'Сохранить водителя';
    $entity_form["actions"]["ief_edit_cancel"]["#attributes"]["class"][] = 'btn-link';
    $entity_form["actions"]["ief_edit_cancel"]["#value"] = 'отменить';
  }

  array_unshift($entity_form['#element_validate'], 'warehouse_inline_entity_form_entity_form_validate');
}

function warehouse_inline_entity_form_entity_form_validate($entity_form, &$form_state)
{
  $form_values = &drupal_array_get_nested_value($form_state['values'], $entity_form['#parents']);
  if ($driver_license = $form_values["field_truck_driver_license"]["und"][0]["value"]) {
    $dbr = db_select('taxonomy_term_data', 't');
    $dbr->condition('t.vid', taxonomy_vocabulary_machine_name_load('drivers')->vid);
    $dbr->addField('t', 'tid');
    $dbr->innerJoin('field_data_field_truck_driver_license', 'fdl', 'fdl.entity_id = t.tid');
    $dbr->condition('fdl.field_truck_driver_license_value', $driver_license);
    $drivers = $dbr->execute()->fetchCol();
    if ($drivers) {
      $parents_path = implode('][', $entity_form['#parents']);
      form_set_error($parents_path . '][field_truck_driver_license', 'Водитель с таким удостоверением уже добавлен, выберите его из правочника');
      return false;
    }
    $form_values["name"] = implode(' ', [$form_values["field_truck_driver_surname"]["und"][0]["value"], $form_values["field_truck_driver_name"]["und"][0]["value"], $form_values["field_truck_driver_name2"]["und"][0]["value"]]) .
      ' (' . $driver_license . ')';

    // обнулить дату допога, если номер не указан
    if (!$form_values["field_dopog_license"]["und"][0]["value"]) {
      $form_values["field_dopog_license_validity"]["und"][0]["value"] = 0;
      $form_values["field_dopog_license_validity"]["und"][0]["value2"] = 0;
    }
  }
}


function warehouse_eck__entity__form_warehouse_work_warehouse_work_validate($form, &$form_state)
{
  // проверка выбора времени в расписании
  if (empty($form_state["input"]["time"])) {
    form_set_error('field_wwork_time', 'Выберите время погрузки');
    return false;
  } elseif ($form["#form_id"] == 'eck__entity__form_add_warehouse_work_warehouse_work') {
    // проверка возможности добаления в заданную дату (на случай подмены значения time формы)
    $year = date('Y', $form_state["input"]["time"]);
    $month = date('m', $form_state["input"]["time"]);
    $day = date('d', $form_state["input"]["time"]);
    if (!_warehouse_is_cargo_add_allowed($year, $month, $day)) {
      form_set_error('field_wwork_time', 'Добавление на выбранное время невозможно. Если вы считаете, что это ошибка, сообщите администратору сайта (<a href="mailto:support@kccc.ru">support@kccc.ru</a>).');
      return false;
    }

    // проверка на предмет занятости данного времени (заняли другие, пока заполняли форму)
    $dbr = db_select('eck_warehouse_work', 'w');
    $dbr->addField('w', 'id');
    $dbr->innerJoin('field_data_field_wwork_time', 'ft', 'ft.entity_id = w.id');
    $dbr->condition('ft.field_wwork_time_value', $form_state["input"]["time"]);
    $load = $dbr->execute()->fetchCol();
    if (count($load)) {
      form_set_error('field_wwork_time', 'Время погрузки уже занято, выберите другое');
      return false;
    }

    $form_state["values"]["field_wwork_time"]["und"][0]["value"] = $form_state["values"]["time"];
    $form_state["values"]["field_wwork_time"]["und"][0]["value2"] = $form_state["values"]["time"];
  } elseif ($form["#form_id"] == 'eck__entity__form_edit_warehouse_work_warehouse_work') {
    // менеджер может изменить время
    // проверить на предмет занятости данного времени (заняли другие, пока заполняли форму)
    $dbr = db_select('eck_warehouse_work', 'w');
    $dbr->addField('w', 'id');
    $dbr->innerJoin('field_data_field_wwork_time', 'ft', 'ft.entity_id = w.id');
    $dbr->condition('ft.field_wwork_time_value', $form_state["values"]["field_wwork_time"]["und"][0]["value"]);
    $dbr->condition('w.id', $form_state["warehouse_work"]->id, '<>');
    $load = $dbr->execute()->fetchCol();
    if (count($load)) {
      form_set_error('field_wwork_time', 'Время погрузки уже занято, выберите другое');
      return false;
    }
  }

  // проверка заполнения полей, если задан водитель
  if (isset($form_state['values']['field_driver']['und']['form']) || isset($form_state["values"]["field_driver"]["und"]["entities"])) {
    if (empty($form_state["values"]["field_file_driver_proxy"]["und"][0]["fid"]))       form_set_error('field_file_driver_proxy', 'Необходимо прикрепить доверенность на водителя');
    if (empty($form_state["values"]["field_truck_number"]["und"][0]["value"]))          form_set_error('field_truck_number', 'Необходимо заполнить номер машины');
    if (empty($form_state["values"]["field_truck_brand"]["und"][0]["value"]))           form_set_error('field_truck_brand', 'Необходимо заполнить марку машины');
    if (empty($form_state["values"]["field_truck_trailer_number"]["und"][0]["value"]))  form_set_error('field_truck_trailer_number', 'Необходимо заполнить номер прицепа');
    if (empty($form_state["values"]["field_truck_trailer_type"]["und"][0]["value"]))    form_set_error('field_truck_trailer_type', 'Необходимо выбрать тип прицепа');
  }
}

function warehouse_eck__entity__form_add_warehouse_work_warehouse_work_submit($form, &$form_state)
{
  $wwork_wr = entity_metadata_wrapper('warehouse_work', $form_state["values"]["entity"]->id);
  warehouse_wwork_export($wwork_wr);

  // редирект с параметрами
  $form_state['redirect'] = [
    'warehouse/queue', [ 'query' => [
      'month' => $form_state['date']['month'],
      'day' => $form_state['date']['day'],
      'offset' => $form_state['date']['offset'],
      'year' => $form_state['date']['year'],
    ]]
  ];
}

function warehouse_wwork_export($wwork_wr, $delete = null)
{
  if ($delete && is_numeric($delete)) {
    $wwork_arr = [
      'id' => $delete,
      'delete' => 1,
    ];
  } else {
    // подготовка массива для выгрузки
    $file_urls = [];
    foreach ($wwork_wr->field_files->getIterator() as $file_wr) {
      $file_urls[] = file_create_url($file_wr->value()['uri']);
    }

    $davalec_id = 0;
    if ($company = ext_user_get_company_by_user()) {
      $davalec_id = $company['1c_id'];
    }

    if ($davalec_id) {
      $created_unix = $wwork_wr->created->value();
      $time_unix = $wwork_wr->field_wwork_time->value();

      $wwork_time = gmdate('d', $time_unix) . '.' . gmdate('m', $time_unix) . '.' . gmdate('Y', $time_unix) . ' ' . gmdate('H', $time_unix) . ':' . gmdate('i', $time_unix);
      $dopog_unix = 0;
      $surname = $name = $name2 = $phone = $license = $dopog_license = '';
      if ($wwork_wr->field_driver->value()) {
        $surname = $wwork_wr->field_driver->field_truck_driver_surname->value();
        $name = $wwork_wr->field_driver->field_truck_driver_name->value();
        $name2 = $wwork_wr->field_driver->field_truck_driver_name2->value();
        $phone = str_replace(' ', '', $wwork_wr->field_driver->field_truck_driver_phone->value());
        $license = $wwork_wr->field_driver->field_truck_driver_license->value();
        $dopog_unix = $wwork_wr->field_driver->field_dopog_license_validity->value();
        $dopog_license = $wwork_wr->field_driver->field_dopog_license->value();
      }
      $dopog_date = $dopog_unix ? gmdate('d', $dopog_unix) . '.' . gmdate('m', $dopog_unix) . '.' . gmdate('Y', $dopog_unix) : '';
      $wwork_arr = [
        'id' => $wwork_wr->getIdentifier(),
        'time' => $wwork_time,
        'dav_id' => $davalec_id,
        'driver' => [
          'surname' => $surname,
          'name' => $name,
          'name2' => $name2,
          'phone' => $phone,
          'license' => $license,
          'proxy_url' => $wwork_wr->field_file_driver_proxy->value() ? file_create_url($wwork_wr->field_file_driver_proxy->value()['uri']) : null,
          'dopog' => $dopog_license,
          'dopog_date' => $dopog_date,
        ],
        'truck' => [
          'number' => $wwork_wr->field_truck_number->value(),
          'region' => $wwork_wr->field_truck_region->value(),
          'brand' => $wwork_wr->field_truck_brand->value(),
          'trailer_type' => $wwork_wr->field_truck_trailer_type->value(),
          'trailer_number' => $wwork_wr->field_truck_trailer_number->value(),
        ],
        'combined_cargo' => (int)$wwork_wr->field_combined_cargo->value(),
        'wwork_order_url' => $wwork_wr->field_file_wwork_order->value() ? file_create_url($wwork_wr->field_file_wwork_order->value()['uri']) : null,
        'file_urls' => $file_urls,
      ];
    }
  }
  $wwork_json = json_encode($wwork_arr, JSON_HEX_TAG | JSON_HEX_APOS | JSON_HEX_AMP | JSON_HEX_QUOT | JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES | JSON_PRETTY_PRINT);
  $filename = 'wwork_export_' . $wwork_arr['id'] . '.json';
  $directory = 'private://exchange/';
  file_prepare_directory($directory, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
  file_unmanaged_save_data($wwork_json, $directory . $filename, $replace = FILE_EXISTS_RENAME);
  watchdog('export', 'Заявка на Погрузку экспортирована.', [], WATCHDOG_INFO);

}


/**
 * hook_form_FORM_ID_alter
 */
function warehouse_form_views_form_weekends_page_alter(&$form, &$form_state)
{
  // перенаправление на расписание после правки выходных
  if (!empty($_GET["field_date_value"])) {
    $form_state['field_date_value'] = $_GET["field_date_value"];
  }
  $form["#submit"][] = 'warehouse_form_views_form_weekends_page_submit';
}

/**
 * hook_form_alter
 */
function warehouse_form_views_form_weekends_page_submit($form, &$form_state)
{
  if (!empty($form_state['field_date_value'])) {
    $form_state['redirect'] = [
      'warehouse/queue', [ 'query' => [
        'year' => $form_state['field_date_value']['value']['year'],
        'month' => $form_state['field_date_value']['value']['month'],
      ]]
    ];
  }
}

/**
 * Implements hook_preprocess_page().
 */
function warehouse_preprocess_page(&$vars)
{
  if (arg(0) == 'warehouse') {
    drupal_add_css(drupal_get_path('module', 'warehouse') . '/css/warehouse.css');
    drupal_add_js(drupal_get_path('module', 'warehouse') . '/js/warehouse.js');
  }
}

function warehouse_get_month_dates($month, $year)
{
  $month_start = gmmktime(0, 0, 0, $month, 1, $year);
  // составить массив дней недели, 0 - пустая клетка
  $w = gmdate('w', $month_start); // порядковый номер дня недели
  if ($w == 0) $w = 7; // 0 - это вск
  $days = array_merge(array_fill(0, $w-1, 0), range(1, gmdate('t', $month_start)));

  $calendar = [];
  foreach($days as $key => $day) {
    $load = [];
    $busy_same = [];
    $is_weekend = false;
    if ($day) {
      $day_start = gmmktime(0, 0, 0, $month, $day, $year);
      $day_finish = gmmktime(0, 0, 0, $month, $day + 1, $year) - 1;

      // определить выходной
      $is_weekend = warehouse_is_date_weekend($day_start);

      // проверить количество всех погрузок в этот день
      $dbr = db_select('eck_warehouse_work', 'w');
      $dbr->addField('w', 'id');
      $dbr->innerJoin('field_data_field_wwork_time', 'ft', 'ft.entity_id = w.id');
      $dbr->condition('ft.field_wwork_time_value', [$day_start, $day_finish], 'between');
      $load = $dbr->execute()->fetchCol();

      // проверить наличие погрузок пользователя в этот день
      if ($company = ext_user_get_company_by_user()) {
        $dbr = db_select('eck_warehouse_work', 'w');
        $dbr->addField('w', 'id');
        $dbr->innerJoin('field_data_field_client', 'fc', 'fc.entity_id = w.id');
        $dbr->condition('fc.field_client_tid', $company['id']);
        $dbr->innerJoin('field_data_field_wwork_time', 'ft', 'ft.entity_id = w.id');
        $dbr->condition('ft.field_wwork_time_value', [$day_start, $day_finish], 'between');
        $busy_same = $dbr->execute()->fetchCol();
      }

    }

    $key_cal = $day? $day : 'e' . $key;
    $calendar[$key_cal] = [
      'day' => $day,
      'wwork_qty' => count($load),
      'wwork_qty_own' => count($busy_same),
      'busy_same' => (bool)$busy_same,
      'is_weekend' => $is_weekend,
    ];

  }

  return $calendar;
}

// является ли дата выходным днём
function warehouse_is_date_weekend($day_unix)
{
  $vid = taxonomy_vocabulary_machine_name_load('dates')->vid;

  // сначала проверяем по своей БД
  $dbr = db_select('taxonomy_term_data', 't');
  $dbr->condition('t.vid', $vid);
  $dbr->innerJoin('field_data_field_date', 'fd', 'fd.entity_id = t.tid');
  $dbr->condition('fd.field_date_value', $day_unix);
  $dbr->innerJoin('field_data_field_is_weekend', 'fw', 'fw.entity_id = t.tid');
  $dbr->addField('fw', 'field_is_weekend_value');
  $result = $dbr->execute()->fetchField();
  if ($result !== false) {
    $is_weekend = (bool)$result;
  } else {
    // при отсутствии - через сервис
    $year = date('Y', $day_unix);
    $month = date('m', $day_unix);
    $day = date('d', $day_unix);
    $ch = curl_init('https://isdayoff.ru/' . $year . '-' . $month . '-' . $day);
    curl_setopt($ch, CURLOPT_HEADER, 0);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);

    $is_weekend = curl_exec($ch);
    if ($is_weekend === false) {
      $is_weekend = in_array(date('w', $day_unix), [0, 6]);
    }

    curl_close($ch);

    $day = (object)array(
      'vid' => $vid,
      'name' => date('d.m.Y', $day_unix),
      'field_date' => ['und' => [0 => ['value' => $day_unix]]],
      'field_is_weekend' => ['und' => [0 => ['value' => (int)$is_weekend]]],
    );
    taxonomy_term_save($day);
  }

  return (bool)$is_weekend;
}

function warehouse_get_day_schedule($month, $day, $year)
{
//  $schedule = &drupal_static(__FUNCTION__);
  if (!isset($schedule)) {

    $day_start = gmmktime(0, 0, 0, $month, $day, $year);
    $day_finish = gmmktime(0, 0, 0, $month, $day + 1, $year) - 1;
    $day_current = gmmktime(0, 0, 0, date('n'), date('j'), date('Y'));
    $day_after_current = gmmktime(0, 0, 0, date('n'), date('j') + 1, date('Y'));
    $timestamp_gmt = time() + 180 * 60;

    $company_id = -1;
    if ($company = ext_user_get_company_by_user()) {
      $company_id = $company['id'];
    }

    // найти погрузки в этот день
    $dbr = db_select('eck_warehouse_work', 'w');
    $dbr->fields('w', ['id', 'uid']);
    $dbr->addField('fwt', 'field_wwork_time_value', 'time');
    $dbr->innerJoin('field_data_field_wwork_time', 'fwt', 'fwt.entity_id = w.id');
    $dbr->condition('fwt.field_wwork_time_value', [$day_start, $day_finish], 'between');
    $dbr->leftJoin('field_data_field_truck_number', 'ftn', 'ftn.entity_id = w.id');
    $dbr->addField('ftn', 'field_truck_number_value', 'truck_number');

    $dbr->leftJoin('field_data_field_text', 'ft', 'ft.entity_id = w.id');
    $dbr->addField('ft', 'field_text_value', 'note');

    $dbr->leftJoin('field_data_field_file_wwork_order', 'fwo', 'fwo.entity_id = w.id');
    $dbr->addField('fwo', 'field_file_wwork_order_fid', 'fid');

    $dbr->leftJoin('field_data_field_combined_cargo', 'fcc', 'fcc.entity_id = w.id');
    $dbr->addField('fcc', 'field_combined_cargo_value', 'combined_cargo');

    $dbr->leftJoin('field_data_field_client', 'fc', 'fc.entity_id = w.id');
    $dbr->addField('fc', 'field_client_tid', 'company_id');

    $dbr->leftJoin('field_data_field_checkin_time', 'fct', 'fct.entity_id = w.id');
    $dbr->addField('fct', 'field_checkin_time_value', 'checkin_time');
    $dbr->leftJoin('field_data_field_onload_time', 'fot', 'fot.entity_id = w.id');
    $dbr->addField('fot', 'field_onload_time_value', 'onload_time');
    $dbr->leftJoin('field_data_field_gone_time', 'fgt', 'fgt.entity_id = w.id');
    $dbr->addField('fgt', 'field_gone_time_value', 'gone_time');

//  $dbr->leftJoin('field_data_field_processing', 'fp', 'fp.entity_id = w.id');
//  $dbr->addField('fp', 'field_processing_value', 'processing');

    $dbr->leftJoin('field_data_field_driver', 'fd', 'fd.entity_id = w.id');
    $dbr->leftJoin('taxonomy_term_data', 't', 't.tid = fd.field_driver_target_id');
    $dbr->addField('t', 'name', 'truck_driver');

    $load = $dbr->execute()->fetchAllAssoc('time');

    // проставить статус каждой Погрузки
    foreach ($load as &$item_l) {
      $item_l->status = 'new';

      // статусы только для "своих" погрузок
      if ($item_l->company_id == $company_id || user_has_role(ROLE_MANAGER_WAREHOUSE)) {
        // если отсутствует информация
        if (!$item_l->truck_driver) {
          $item_l->status = 'lack';
        }

        if (!$item_l->checkin_time) {
          // если за MINS_BEFORE_REGISTER_LATE до назначенного времени не зарегистрирован - Предупреждение
          if ($timestamp_gmt + MINS_BEFORE_REGISTER_LATE * 60 > $item_l->time) {
            $item_l->status = 'late';
          }
          // если назначенное время+30мин прошло - Пропустил
          if ($timestamp_gmt > $item_l->time + 30 * 60) $item_l->status = 'missed';
        } else {
          $item_l->status = 'checkin';

          if (!$item_l->onload_time) {
            // если в течение MINS_BEFORE_ONLOAD_LATE минут не заехал - Предупреждение
            if ($timestamp_gmt > $item_l->time + MINS_BEFORE_ONLOAD_LATE * 60) $item_l->status = 'late';
            // если в течение 30 минут не заехал - Пропустил
            if ($timestamp_gmt > $item_l->time + 30 * 60) $item_l->status = 'missed';
          } else $item_l->status = 'onload';

          if ($item_l->gone_time) $item_l->status = 'gone';
        }
      }
    }

    // количество погрузок в день после заполнения которых открывается резерв
    $is_primary_time_filled = count($load) >= 16;

    // условие, при котором на заданный день запись уже недоступна
    // - текущий день и ранее
    // - на следующий день запись доступна до HOUR_ADD_AVAILABLE_TILL текущего
    $is_day_blocked = !_warehouse_is_cargo_add_allowed($year, $month, $day);

    // определить, открываем дополнительное время или резервное
    $is_quarter_locked = true;  // открывать ли резерв
    $offset_to_free = 0;        // какое из дополнительного времени будет открыто
    if ($is_primary_time_filled) {
      $is_more_time_found = false;
      foreach ([960, 990, 1020, 1050, 1080] as $offset) {
        if (!$is_more_time_found && !isset($load[$day_start + $offset * 60])) {
          $offset_to_free = $offset;
          $is_more_time_found = true;
        }
      }

      if (!$is_more_time_found) {
        $is_quarter_locked = false;
      }
    }

    $schedule = [
      420 => ['status' => isset($load[$day_start + 420 * 60]) ? ((user_has_role(ROLE_MANAGER_WAREHOUSE) || $load[$day_start + 420 * 60]->company_id == $company_id) ? DAY_STATUS_BUSY_SAME : DAY_STATUS_BUSY) : ($is_day_blocked ? DAY_STATUS_UNAVAILABLE : DAY_STATUS_FREE), 'offset' => 420, 'duration' => 15, 'text' => '7<sup>00</sup>', 'load' => isset($load[$day_start + 420 * 60]) ? $load[$day_start + 420 * 60] : null],
      435 => ['status' => isset($load[$day_start + 435 * 60]) ? ((user_has_role(ROLE_MANAGER_WAREHOUSE) || $load[$day_start + 435 * 60]->company_id == $company_id) ? DAY_STATUS_BUSY_SAME : DAY_STATUS_BUSY) : ($is_day_blocked || $is_quarter_locked ? DAY_STATUS_UNAVAILABLE : DAY_STATUS_FREE), 'offset' => 435, 'duration' => 15, 'text' => '7<sup>15</sup>', 'load' => isset($load[$day_start + 435 * 60]) ? $load[$day_start + 435 * 60] : null],
      450 => ['status' => isset($load[$day_start + 450 * 60]) ? ((user_has_role(ROLE_MANAGER_WAREHOUSE) || $load[$day_start + 450 * 60]->company_id == $company_id) ? DAY_STATUS_BUSY_SAME : DAY_STATUS_BUSY) : ($is_day_blocked ? DAY_STATUS_UNAVAILABLE : DAY_STATUS_FREE), 'offset' => 450, 'duration' => 15, 'text' => '7<sup>30</sup>', 'load' => isset($load[$day_start + 450 * 60]) ? $load[$day_start + 450 * 60] : null],
      465 => ['status' => isset($load[$day_start + 465 * 60]) ? ((user_has_role(ROLE_MANAGER_WAREHOUSE) || $load[$day_start + 465 * 60]->company_id == $company_id) ? DAY_STATUS_BUSY_SAME : DAY_STATUS_BUSY) : ($is_day_blocked || $is_quarter_locked ? DAY_STATUS_UNAVAILABLE : DAY_STATUS_FREE), 'offset' => 465, 'duration' => 15, 'text' => '7<sup>45</sup>', 'load' => isset($load[$day_start + 465 * 60]) ? $load[$day_start + 465 * 60] : null],
      480 => ['status' => isset($load[$day_start + 480 * 60]) ? ((user_has_role(ROLE_MANAGER_WAREHOUSE) || $load[$day_start + 480 * 60]->company_id == $company_id) ? DAY_STATUS_BUSY_SAME : DAY_STATUS_BUSY) : ($is_day_blocked ? DAY_STATUS_UNAVAILABLE : DAY_STATUS_FREE), 'offset' => 480, 'duration' => 15, 'text' => '8<sup>00</sup>', 'load' => isset($load[$day_start + 480 * 60]) ? $load[$day_start + 480 * 60] : null],
      495 => ['status' => isset($load[$day_start + 495 * 60]) ? ((user_has_role(ROLE_MANAGER_WAREHOUSE) || $load[$day_start + 495 * 60]->company_id == $company_id) ? DAY_STATUS_BUSY_SAME : DAY_STATUS_BUSY) : ($is_day_blocked || $is_quarter_locked ? DAY_STATUS_UNAVAILABLE : DAY_STATUS_FREE), 'offset' => 495, 'duration' => 15, 'text' => '8<sup>15</sup>', 'load' => isset($load[$day_start + 495 * 60]) ? $load[$day_start + 495 * 60] : null],
      510 => ['status' => isset($load[$day_start + 510 * 60]) ? ((user_has_role(ROLE_MANAGER_WAREHOUSE) || $load[$day_start + 510 * 60]->company_id == $company_id) ? DAY_STATUS_BUSY_SAME : DAY_STATUS_BUSY) : ($is_day_blocked ? DAY_STATUS_UNAVAILABLE : DAY_STATUS_FREE), 'offset' => 510, 'duration' => 15, 'text' => '8<sup>30</sup>', 'load' => isset($load[$day_start + 510 * 60]) ? $load[$day_start + 510 * 60] : null],
      525 => ['status' => isset($load[$day_start + 525 * 60]) ? ((user_has_role(ROLE_MANAGER_WAREHOUSE) || $load[$day_start + 525 * 60]->company_id == $company_id) ? DAY_STATUS_BUSY_SAME : DAY_STATUS_BUSY) : ($is_day_blocked || $is_quarter_locked ? DAY_STATUS_UNAVAILABLE : DAY_STATUS_FREE), 'offset' => 525, 'duration' => 15, 'text' => '8<sup>45</sup>', 'load' => isset($load[$day_start + 525 * 60]) ? $load[$day_start + 525 * 60] : null],
      540 => ['status' => isset($load[$day_start + 540 * 60]) ? ((user_has_role(ROLE_MANAGER_WAREHOUSE) || $load[$day_start + 540 * 60]->company_id == $company_id) ? DAY_STATUS_BUSY_SAME : DAY_STATUS_BUSY) : ($is_day_blocked ? DAY_STATUS_UNAVAILABLE : DAY_STATUS_FREE), 'offset' => 540, 'duration' => 15, 'text' => '9<sup>00</sup>', 'load' => isset($load[$day_start + 540 * 60]) ? $load[$day_start + 540 * 60] : null],
      555 => ['status' => isset($load[$day_start + 555 * 60]) ? ((user_has_role(ROLE_MANAGER_WAREHOUSE) || $load[$day_start + 555 * 60]->company_id == $company_id) ? DAY_STATUS_BUSY_SAME : DAY_STATUS_BUSY) : ($is_day_blocked || $is_quarter_locked ? DAY_STATUS_UNAVAILABLE : DAY_STATUS_FREE), 'offset' => 555, 'duration' => 15, 'text' => '9<sup>15</sup>', 'load' => isset($load[$day_start + 555 * 60]) ? $load[$day_start + 555 * 60] : null],
      570 => ['status' => isset($load[$day_start + 570 * 60]) ? ((user_has_role(ROLE_MANAGER_WAREHOUSE) || $load[$day_start + 570 * 60]->company_id == $company_id) ? DAY_STATUS_BUSY_SAME : DAY_STATUS_BUSY) : ($is_day_blocked ? DAY_STATUS_UNAVAILABLE : DAY_STATUS_FREE), 'offset' => 570, 'duration' => 15, 'text' => '9<sup>30</sup>', 'load' => isset($load[$day_start + 570 * 60]) ? $load[$day_start + 570 * 60] : null],
      585 => ['status' => isset($load[$day_start + 585 * 60]) ? ((user_has_role(ROLE_MANAGER_WAREHOUSE) || $load[$day_start + 585 * 60]->company_id == $company_id) ? DAY_STATUS_BUSY_SAME : DAY_STATUS_BUSY) : ($is_day_blocked || $is_quarter_locked ? DAY_STATUS_UNAVAILABLE : DAY_STATUS_FREE), 'offset' => 585, 'duration' => 15, 'text' => '9<sup>45</sup>', 'load' => isset($load[$day_start + 585 * 60]) ? $load[$day_start + 585 * 60] : null],
      600 => ['status' => isset($load[$day_start + 600 * 60]) ? ((user_has_role(ROLE_MANAGER_WAREHOUSE) || $load[$day_start + 600 * 60]->company_id == $company_id) ? DAY_STATUS_BUSY_SAME : DAY_STATUS_BUSY) : ($is_day_blocked ? DAY_STATUS_UNAVAILABLE : DAY_STATUS_FREE), 'offset' => 600, 'duration' => 15, 'text' => '10<sup>00</sup>', 'load' => isset($load[$day_start + 600 * 60]) ? $load[$day_start + 600 * 60] : null],
      615 => ['status' => isset($load[$day_start + 615 * 60]) ? ((user_has_role(ROLE_MANAGER_WAREHOUSE) || $load[$day_start + 615 * 60]->company_id == $company_id) ? DAY_STATUS_BUSY_SAME : DAY_STATUS_BUSY) : ($is_day_blocked || $is_quarter_locked ? DAY_STATUS_UNAVAILABLE : DAY_STATUS_FREE), 'offset' => 615, 'duration' => 15, 'text' => '10<sup>15</sup>', 'load' => isset($load[$day_start + 615 * 60]) ? $load[$day_start + 615 * 60] : null],
      630 => ['status' => isset($load[$day_start + 630 * 60]) ? ((user_has_role(ROLE_MANAGER_WAREHOUSE) || $load[$day_start + 630 * 60]->company_id == $company_id) ? DAY_STATUS_BUSY_SAME : DAY_STATUS_BUSY) : ($is_day_blocked ? DAY_STATUS_UNAVAILABLE : DAY_STATUS_FREE), 'offset' => 630, 'duration' => 15, 'text' => '10<sup>30</sup>', 'load' => isset($load[$day_start + 630 * 60]) ? $load[$day_start + 630 * 60] : null],
      645 => ['status' => isset($load[$day_start + 645 * 60]) ? ((user_has_role(ROLE_MANAGER_WAREHOUSE) || $load[$day_start + 645 * 60]->company_id == $company_id) ? DAY_STATUS_BUSY_SAME : DAY_STATUS_BUSY) : ($is_day_blocked || $is_quarter_locked ? DAY_STATUS_UNAVAILABLE : DAY_STATUS_FREE), 'offset' => 645, 'duration' => 15, 'text' => '10<sup>45</sup>', 'load' => isset($load[$day_start + 645 * 60]) ? $load[$day_start + 645 * 60] : null],
      660 => ['status' => isset($load[$day_start + 660 * 60]) ? ((user_has_role(ROLE_MANAGER_WAREHOUSE) || $load[$day_start + 660 * 60]->company_id == $company_id) ? DAY_STATUS_BUSY_SAME : DAY_STATUS_BUSY) : ($is_day_blocked ? DAY_STATUS_UNAVAILABLE : DAY_STATUS_FREE), 'offset' => 660, 'duration' => 15, 'text' => '11<sup>00</sup>', 'load' => isset($load[$day_start + 660 * 60]) ? $load[$day_start + 660 * 60] : null],
      675 => ['status' => isset($load[$day_start + 675 * 60]) ? ((user_has_role(ROLE_MANAGER_WAREHOUSE) || $load[$day_start + 675 * 60]->company_id == $company_id) ? DAY_STATUS_BUSY_SAME : DAY_STATUS_BUSY) : ($is_day_blocked || $is_quarter_locked ? DAY_STATUS_UNAVAILABLE : DAY_STATUS_FREE), 'offset' => 675, 'duration' => 15, 'text' => '11<sup>15</sup>', 'load' => isset($load[$day_start + 675 * 60]) ? $load[$day_start + 675 * 60] : null],
      690 => ['status' => isset($load[$day_start + 690 * 60]) ? ((user_has_role(ROLE_MANAGER_WAREHOUSE) || $load[$day_start + 690 * 60]->company_id == $company_id) ? DAY_STATUS_BUSY_SAME : DAY_STATUS_BUSY) : ($is_day_blocked ? DAY_STATUS_UNAVAILABLE : DAY_STATUS_FREE), 'offset' => 690, 'duration' => 15, 'text' => '11<sup>30</sup>', 'load' => isset($load[$day_start + 690 * 60]) ? $load[$day_start + 690 * 60] : null],
      705 => ['status' => isset($load[$day_start + 705 * 60]) ? ((user_has_role(ROLE_MANAGER_WAREHOUSE) || $load[$day_start + 705 * 60]->company_id == $company_id) ? DAY_STATUS_BUSY_SAME : DAY_STATUS_BUSY) : ($is_day_blocked || $is_quarter_locked ? DAY_STATUS_UNAVAILABLE : DAY_STATUS_FREE), 'offset' => 705, 'duration' => 15, 'text' => '11<sup>45</sup>', 'load' => isset($load[$day_start + 705 * 60]) ? $load[$day_start + 705 * 60] : null],

      780 => ['status' => isset($load[$day_start + 780 * 60]) ? ((user_has_role(ROLE_MANAGER_WAREHOUSE) || $load[$day_start + 780 * 60]->company_id == $company_id) ? DAY_STATUS_BUSY_SAME : DAY_STATUS_BUSY) : ($is_day_blocked ? DAY_STATUS_UNAVAILABLE : DAY_STATUS_FREE), 'offset' => 780, 'duration' => 15, 'text' => '13<sup>00</sup>', 'load' => isset($load[$day_start + 780 * 60]) ? $load[$day_start + 780 * 60] : null],
      795 => ['status' => isset($load[$day_start + 795 * 60]) ? ((user_has_role(ROLE_MANAGER_WAREHOUSE) || $load[$day_start + 795 * 60]->company_id == $company_id) ? DAY_STATUS_BUSY_SAME : DAY_STATUS_BUSY) : ($is_day_blocked || $is_quarter_locked ? DAY_STATUS_UNAVAILABLE : DAY_STATUS_FREE), 'offset' => 795, 'duration' => 15, 'text' => '13<sup>15</sup>', 'load' => isset($load[$day_start + 795 * 60]) ? $load[$day_start + 795 * 60] : null],
      810 => ['status' => isset($load[$day_start + 810 * 60]) ? ((user_has_role(ROLE_MANAGER_WAREHOUSE) || $load[$day_start + 810 * 60]->company_id == $company_id) ? DAY_STATUS_BUSY_SAME : DAY_STATUS_BUSY) : ($is_day_blocked ? DAY_STATUS_UNAVAILABLE : DAY_STATUS_FREE), 'offset' => 810, 'duration' => 15, 'text' => '13<sup>30</sup>', 'load' => isset($load[$day_start + 810 * 60]) ? $load[$day_start + 810 * 60] : null],
      825 => ['status' => isset($load[$day_start + 825 * 60]) ? ((user_has_role(ROLE_MANAGER_WAREHOUSE) || $load[$day_start + 825 * 60]->company_id == $company_id) ? DAY_STATUS_BUSY_SAME : DAY_STATUS_BUSY) : ($is_day_blocked || $is_quarter_locked ? DAY_STATUS_UNAVAILABLE : DAY_STATUS_FREE), 'offset' => 825, 'duration' => 15, 'text' => '13<sup>45</sup>', 'load' => isset($load[$day_start + 825 * 60]) ? $load[$day_start + 825 * 60] : null],
      840 => ['status' => isset($load[$day_start + 840 * 60]) ? ((user_has_role(ROLE_MANAGER_WAREHOUSE) || $load[$day_start + 840 * 60]->company_id == $company_id) ? DAY_STATUS_BUSY_SAME : DAY_STATUS_BUSY) : ($is_day_blocked ? DAY_STATUS_UNAVAILABLE : DAY_STATUS_FREE), 'offset' => 840, 'duration' => 15, 'text' => '14<sup>00</sup>', 'load' => isset($load[$day_start + 840 * 60]) ? $load[$day_start + 840 * 60] : null],
      855 => ['status' => isset($load[$day_start + 855 * 60]) ? ((user_has_role(ROLE_MANAGER_WAREHOUSE) || $load[$day_start + 855 * 60]->company_id == $company_id) ? DAY_STATUS_BUSY_SAME : DAY_STATUS_BUSY) : ($is_day_blocked || $is_quarter_locked ? DAY_STATUS_UNAVAILABLE : DAY_STATUS_FREE), 'offset' => 855, 'duration' => 15, 'text' => '14<sup>15</sup>', 'load' => isset($load[$day_start + 855 * 60]) ? $load[$day_start + 855 * 60] : null],
      870 => ['status' => isset($load[$day_start + 870 * 60]) ? ((user_has_role(ROLE_MANAGER_WAREHOUSE) || $load[$day_start + 870 * 60]->company_id == $company_id) ? DAY_STATUS_BUSY_SAME : DAY_STATUS_BUSY) : ($is_day_blocked ? DAY_STATUS_UNAVAILABLE : DAY_STATUS_FREE), 'offset' => 870, 'duration' => 15, 'text' => '14<sup>30</sup>', 'load' => isset($load[$day_start + 870 * 60]) ? $load[$day_start + 870 * 60] : null],
      885 => ['status' => isset($load[$day_start + 885 * 60]) ? ((user_has_role(ROLE_MANAGER_WAREHOUSE) || $load[$day_start + 885 * 60]->company_id == $company_id) ? DAY_STATUS_BUSY_SAME : DAY_STATUS_BUSY) : ($is_day_blocked || $is_quarter_locked ? DAY_STATUS_UNAVAILABLE : DAY_STATUS_FREE), 'offset' => 885, 'duration' => 15, 'text' => '14<sup>45</sup>', 'load' => isset($load[$day_start + 885 * 60]) ? $load[$day_start + 885 * 60] : null],
      900 => ['status' => isset($load[$day_start + 900 * 60]) ? ((user_has_role(ROLE_MANAGER_WAREHOUSE) || $load[$day_start + 900 * 60]->company_id == $company_id) ? DAY_STATUS_BUSY_SAME : DAY_STATUS_BUSY) : ($is_day_blocked ? DAY_STATUS_UNAVAILABLE : DAY_STATUS_FREE), 'offset' => 900, 'duration' => 15, 'text' => '15<sup>00</sup>', 'load' => isset($load[$day_start + 900 * 60]) ? $load[$day_start + 900 * 60] : null],
      915 => ['status' => isset($load[$day_start + 915 * 60]) ? ((user_has_role(ROLE_MANAGER_WAREHOUSE) || $load[$day_start + 915 * 60]->company_id == $company_id) ? DAY_STATUS_BUSY_SAME : DAY_STATUS_BUSY) : ($is_day_blocked || $is_quarter_locked ? DAY_STATUS_UNAVAILABLE : DAY_STATUS_FREE), 'offset' => 915, 'duration' => 15, 'text' => '15<sup>15</sup>', 'load' => isset($load[$day_start + 915 * 60]) ? $load[$day_start + 915 * 60] : null],
      930 => ['status' => isset($load[$day_start + 930 * 60]) ? ((user_has_role(ROLE_MANAGER_WAREHOUSE) || $load[$day_start + 930 * 60]->company_id == $company_id) ? DAY_STATUS_BUSY_SAME : DAY_STATUS_BUSY) : ($is_day_blocked ? DAY_STATUS_UNAVAILABLE : DAY_STATUS_FREE), 'offset' => 930, 'duration' => 15, 'text' => '15<sup>30</sup>', 'load' => isset($load[$day_start + 930 * 60]) ? $load[$day_start + 930 * 60] : null],
      945 => ['status' => isset($load[$day_start + 945 * 60]) ? ((user_has_role(ROLE_MANAGER_WAREHOUSE) || $load[$day_start + 945 * 60]->company_id == $company_id) ? DAY_STATUS_BUSY_SAME : DAY_STATUS_BUSY) : ($is_day_blocked || $is_quarter_locked ? DAY_STATUS_UNAVAILABLE : DAY_STATUS_FREE), 'offset' => 945, 'duration' => 15, 'text' => '15<sup>45</sup>', 'load' => isset($load[$day_start + 945 * 60]) ? $load[$day_start + 945 * 60] : null],

      960 => ['status' => isset($load[$day_start + 960 * 60]) ? ((user_has_role(ROLE_MANAGER_WAREHOUSE) || $load[$day_start + 960 * 60]->company_id == $company_id) ? DAY_STATUS_BUSY_SAME : DAY_STATUS_BUSY) : ($is_day_blocked || $offset_to_free != 960 ? DAY_STATUS_UNAVAILABLE : DAY_STATUS_FREE), 'offset' => 960, 'duration' => 30, 'text' => '16<sup>00</sup>', 'load' => isset($load[$day_start + 960 * 60]) ? $load[$day_start + 960 * 60] : null],
      990 => ['status' => isset($load[$day_start + 990 * 60]) ? ((user_has_role(ROLE_MANAGER_WAREHOUSE) || $load[$day_start + 990 * 60]->company_id == $company_id) ? DAY_STATUS_BUSY_SAME : DAY_STATUS_BUSY) : ($is_day_blocked || $offset_to_free != 990 ? DAY_STATUS_UNAVAILABLE : DAY_STATUS_FREE), 'offset' => 990, 'duration' => 30, 'text' => '16<sup>30</sup>', 'load' => isset($load[$day_start + 990 * 60]) ? $load[$day_start + 990 * 60] : null],
      1020 => ['status' => isset($load[$day_start + 1020 * 60]) ? ((user_has_role(ROLE_MANAGER_WAREHOUSE) || $load[$day_start + 1020 * 60]->company_id == $company_id) ? DAY_STATUS_BUSY_SAME : DAY_STATUS_BUSY) : ($is_day_blocked || $offset_to_free != 1020 ? DAY_STATUS_UNAVAILABLE : DAY_STATUS_FREE), 'offset' => 1020, 'duration' => 30, 'text' => '17<sup>00</sup>', 'load' => isset($load[$day_start + 1020 * 60]) ? $load[$day_start + 1020 * 60] : null],
      1050 => ['status' => isset($load[$day_start + 1050 * 60]) ? ((user_has_role(ROLE_MANAGER_WAREHOUSE) || $load[$day_start + 1050 * 60]->company_id == $company_id) ? DAY_STATUS_BUSY_SAME : DAY_STATUS_BUSY) : ($is_day_blocked || $offset_to_free != 1050 ? DAY_STATUS_UNAVAILABLE : DAY_STATUS_FREE), 'offset' => 1050, 'duration' => 30, 'text' => '17<sup>30</sup>', 'load' => isset($load[$day_start + 1050 * 60]) ? $load[$day_start + 1050 * 60] : null],
      1080 => ['status' => isset($load[$day_start + 1080 * 60]) ? ((user_has_role(ROLE_MANAGER_WAREHOUSE) || $load[$day_start + 1080 * 60]->company_id == $company_id) ? DAY_STATUS_BUSY_SAME : DAY_STATUS_BUSY) : ($is_day_blocked || $offset_to_free != 1080 ? DAY_STATUS_UNAVAILABLE : DAY_STATUS_FREE), 'offset' => 1080, 'duration' => 30, 'text' => '18<sup>00</sup>', 'load' => isset($load[$day_start + 1080 * 60]) ? $load[$day_start + 1080 * 60] : null],
    ];

  }
  return $schedule;
}

function warehouse_taxonomy_term_presave($term)
{
  if ($term->vocabulary_machine_name == 'drivers') {
    // автоматически заполнить поле name
    $term->name = $term->field_truck_driver_surname["und"][0]["value"] . ' ' . $term->field_truck_driver_name["und"][0]["value"] . (empty($term->field_truck_driver_name2["und"][0]["value"]) ? '' : ' ' . $term->field_truck_driver_name2["und"][0]["value"]);
    $term->name .= ' (' . $term->field_truck_driver_license["und"][0]["value"] . ')';
  }
}

function warehouse_entity_query_alter(&$query)
{
  // добавить фильтр по Подрядчикам для Водителей (у каждого клиента свой список)
  if (isset($query->metaData["field"]) && $query->metaData["field"]["field_name"] == 'field_driver') {
    if ($company = ext_user_get_company_by_user()) {
      $query->fieldCondition('field_client', 'tid', $company['id']);
    }
  }
}

function warehouse_get_text_for_driver_status($status)
{
  $text = '';
  switch ($status) {
    case 'late':    $text = 'Опаздывает'; break;
    case 'gone':    $text = 'Уехал'; break;
    case 'missed':  $text = 'Пропустил';  break;
  }

  return $text;
}

function warehouse_get_text_for_order_status($status)
{
  $text = '';
  switch ($status) {
    case 'late':    $text = 'Опоздание'; break;
    case 'lack':    $text = 'Не хватает данных'; break;
    case 'gone':    $text = 'Выполнено'; break;
    case 'missed':  $text = 'Не выполнено';  break;
  }

  return $text;}

function date_field_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items)
{
  // todo переделать
  // кривое решение вывода времени в формате UTC+3 хранящегося в БД в ФОРМАТЕ UTC+0
  // изменяем время перед рендерингом поля
  // при изменении - откорректировать warehouse_handler_field_status.inc
  if (in_array($field["field_name"], ['field_wwork_time', 'field_checkin_time', 'field_onload_time', 'field_gone_time'])) {
    foreach ($items as &$item) {
      if (!empty($item[0]["value"])) {
        $item[0]["value"] = $item[0]["value"] - 3*60*60;
      }
    }
  }
}

// условие, при котором на заданный день добавление загрузки уже недоступна
// - текущий день и ранее
// - на следующий день запись доступна до HOUR_ADD_AVAILABLE_TILL текущего
function _warehouse_is_cargo_add_allowed($year, $month, $day)
{
  $day_start = gmmktime(0, 0, 0, $month, $day, $year);
  $day_current = gmmktime(0, 0, 0, date('n'), date('j'), date('Y'));
  $day_after_current = gmmktime(0, 0, 0, date('n'), date('j')+1, date('Y'));
  $timestamp_gmt = time() + 180*60;

  $is_day_blocked = $day_start < $day_after_current || ($day_start == $day_after_current && $timestamp_gmt > $day_current + HOUR_ADD_AVAILABLE_TILL * 60 * 60);

  return !$is_day_blocked;
}
// условие, при котором на заданный день добавление сборной загрузки уже недоступна
// - текущий день и ранее
// - на следующий день запись доступна до HOUR_ADD_AVAILABLE_TILL текущего
function _warehouse_is_combined_cargo_add_allowed($year, $month, $day)
{
  $day_start = gmmktime(0, 0, 0, $month, $day, $year);
  $day_current = gmmktime(0, 0, 0, date('n'), date('j'), date('Y'));
  $day_after_current = gmmktime(0, 0, 0, date('n'), date('j')+1, date('Y'));
  $timestamp_gmt = time() + 180*60;

  $is_day_blocked = $day_start < $day_after_current || ($day_start == $day_after_current && $timestamp_gmt > $day_current + HOUR_COMBINED_CARGO_ADD_AVAILABLE_TILL*60*60);

  return !$is_day_blocked;
}

/**
 * Implements hook_entity_delete().
 */
function warehouse_entity_delete($entity, $type)
{
  // при удалении заявки отправить пакет в 1с
  if (isset($entity->type) && $entity->type == 'warehouse_work') {
    warehouse_wwork_export(null, $entity->id);
  }
}

//function warehouse_get_driver_by_1cID($driver_1cID)
//{
//  $vid = taxonomy_vocabulary_machine_name_load('drivers')->vid;
//  $query = new EntityFieldQuery();
//  $terms = $query
//    ->entityCondition('entity_type', 'taxonomy_term')
//    ->propertyCondition('vid', $vid)
//    ->fieldCondition('field_oc_driver_id', 'value', $driver_1cID)
//    ->execute();
//
//  if ($terms) {
//    $entities = entity_load('taxonomy_term', [current($terms['taxonomy_term'])->tid]);
//  }
//  return empty($entities) ? false: current($entities);
//}

/**
 * Implements hook_views_api().
 */
function warehouse_views_api()
{
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'warehouse') . '/views',
  );
}

/**
 * Implements hook_views_data_alter().
 */
function warehouse_views_data_alter(&$data)
{
  $data['eck_warehouse_work']['status'] = array(
    'field' => array(
      'title' => t('Статус'),
      'handler' => 'warehouse_handler_field_status',
    ),
  );
}

