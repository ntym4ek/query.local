<?php

/**
 * Implementation of hook_menu().
 */
function ext_admin_menu()
{
  $items['admin/config/custom'] = array(
    'title' => 'Custom',
    'position' => 'right',
    'weight' => -100,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items['admin/config/custom/settings'] = array(
    'title' => 'Настройки',
    'weight' => 0,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ext_admin_settings_form'),
    'access arguments' => array('access manager settings'),
    'file' => 'includes/ext_admin.settings.inc',
  );
  $items['admin/config/custom/migration'] = array(
    'title' => 'Перенос данных',
    'weight' => 1,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ext_admin_migration_form'),
    'access arguments' => array('access manager settings'),
  );

  return $items;
}

/**
 * Implements hook_cron_queue_info().
 */
function ext_admin_cron_queue_info()
{
  $queues['ext_admin_queue_worker'] = array(
    'worker callback' => 'ext_admin_queue_callback',
  );

  return $queues;
}

function ext_admin_migration_form($form, &$form_state)
{
  $function = '';
  $function = 'ext_admin_process_migration';

  $form['message'] = array(
    '#markup' => ($function ? '<p>Будет запущена функция ' . $function . '</p>' : '<p>Функция для запуска не задана</p>'),
  );
  $form['control'] = array(
    '#type' => 'checkbox',
    '#title' => 'контрольная галка',
    '#description' => 'установить перед запуском',
    '#default_value' => false,
  );
  $form['function'] = array(
    '#type' => 'hidden',
    '#value' => $function,
  );
  $form['run'] = [
    '#type' => 'submit',
    '#value' => 'Пуск!',
  ];

  return $form;
}
function ext_admin_migration_form_validate($form, &$form_state)
{
  if (!$form_state['values']['function']) {
    form_set_error('','Нужно задать функцию, которая будет запущена');
    return false;
  }
  if (!function_exists($form_state['values']['function'])) {
    form_set_error('', 'Заданная функция ' . $form_state['values']['function'] . ' не существует');
    return false;
  }
  if (!$form_state['values']['control']) {
    form_set_error('control', 'Нужно установить контроль');
    return false;
  }
}
function ext_admin_migration_form_submit($form, &$form_state)
{
  $function = $form_state['values']['function'];
  if ($function()) {
    drupal_set_message('Запуск выполнен успешно');
  } else {
    drupal_set_message('Неуспешный пуск', 'warning');
  }
}

function ext_admin_process_migration()
{
  $queue = DrupalQueue::get('ext_admin_queue_worker');
  $queue->deleteQueue();

  $counter = 0;

  // список компаний-юзеров
  $dbr = db_select('users', 'u');
  $dbr->addField('u', 'uid');
  if ($users = $dbr->execute()->fetchCol()) {
    foreach ($users as $uid) {
      $account = user_load($uid);
      if ($account)
      {
        $queue->createItem($uid);
        $counter++;
      }
    }
  }

  drupal_set_message('Done ' . $counter . ' iterations');

  $dest = strpos($_SERVER["HTTP_REFERER"], $GLOBALS["base_url"]) !== false ? $_SERVER["HTTP_REFERER"] : false;
  if ($dest) {
    drupal_goto($dest);
  }
}

function ext_admin_queue_callback($uid)
{
  if (!$uid) return;

  $success = false;
  $error = '';

  $client_wr = entity_metadata_wrapper('user', $uid);

  if ($company_tid = $client_wr->field_user_company->raw()) {
    $client_wr->field_user_companies[] = $company_tid;
    $client_wr->save();
    $success = true;
  }

  if ($success) {
    watchdog('transfer', 'Удачно (%id)', ['%id' => $client_wr->label()]);
  } else {
    watchdog('transfer', 'Недачно. %error (%id)', ['%id' => $client_wr->label(), '%error' => $error], WATCHDOG_ERROR);
  }
}
