<?php

define('DAYS_BEFORE_PRODUCE_START', 1);
// Кол-во дней, которое начиная с текущей даты установка недоступна
// для выбора дат производства.
// Время нужно для согласования и подготовки установки к началу производства.
define('DAYS_UNAVAILABLE', 3);

// tid технических работ
define('TID_SERVICE_WORK', 583);

/**
 * Implementation of hook_menu().
 */
function production_menu()
{
  $items['production/produce-units-load'] = array(
    'title' => 'Загрузка установок',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['production_pu_load_form'],
    'access callback' => true,
    'file' => 'includes/production.pages.inc',
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'main-menu',
  );
  $items['production/report-year'] = array(
    'title' => 'План на сезон',
    'description' => 'В тестовом режиме',
    'page callback' => 'production_year_page',
    'access callback' => true,
    'file' => 'includes/production.pages.inc',
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'main-menu',
  );

//  $items['admin/config/custom/exchange'] = array(
//    'title' => 'Импорт',
//    'page callback' => 'drupal_get_form',
//    'page arguments' => array('production_import_form'),
//    'access arguments' => array('access manager settings'),
//    'file' => 'includes/production.import.inc',
//    'type' => MENU_LOCAL_TASK,
//  );
//  $items['admin/config/custom/delete'] = array(
//    'title' => 'Удаление заявок',
//    'page callback' => 'drupal_get_form',
//    'page arguments' => array('production_delete_form'),
//    'access arguments' => array('access manager settings'),
//    'file' => 'includes/production.import.inc',
//    'type' => MENU_LOCAL_TASK,
//  );

  return $items;
}

/**
 * Implementation of hook_menu_alter().
 */
function production_menu_alter(&$items)
{
  // убрать материалы с Главной
  $items['node']['page callback'] = 'production_empty_front_page_callback';

  // "Удалить" в локальные задачи материала
  // http://xandeadx.ru/blog/drupal/339
  $items['node/%node/delete']['context'] = MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE;
}

/**
 * Implements hook_cron()
 */
function production_cron()
{
  // однократно после восьми отправить письмо с изменениями (при пятиминутном интервале крона)
  // todo кривое решение, может не сработать если сервер не дёрнет крон в этот промежуток
  if (REQUEST_TIME >= strtotime('07:27') && REQUEST_TIME < strtotime('07:34')) {
    mailer_batch_mail_production();
  }
}

/**
 * hook_import_processors_alter
 */
function production_import_processors_alter(&$processors)
{
  if (variable_get('import_pr_1с_enable', 0)) {
    $path = drupal_get_path('module', 'production') . '/includes/';
    $processors['first_queue'][] =  ['mask' => '/^dav.*\.json/',                 'include' => $path . 'production.import.inc', 'func' => 'production_client_import', 'archive' => 'prod/prod'];
    $processors['first_queue'][] =  ['mask' => '/^ust.*\.json/',                 'include' => $path . 'production.import.inc', 'func' => 'production_produce_units_import', 'archive' => 'prod/prod'];
    $processors['first_queue'][] =  ['mask' => '/^cause.*\.json/',               'include' => $path . 'production.import.inc', 'func' => 'production_reasons_import', 'archive' => 'prod/prod'];
    $processors['first_queue'][] =  ['mask' => '/^nom.*\.json/',                 'include' => $path . 'production.import.inc', 'func' => 'production_nomenklatura_import', 'archive' => 'prod/prod'];
    $processors['first_queue'][] =  ['mask' => '/^query_import_pred_.*\.json/',  'include' => $path . 'production.import.inc', 'func' => 'production_query_import', 'archive' => 'prod/prod'];

    $processors['last_queue'][]  =  ['mask' => '/^plan.*\.json/',                'include' => $path . 'production.import.inc', 'func' => 'production_produce_plan_import', 'archive' => 'prod/prod'];
    $processors['last_queue'][]  =  ['mask' => '/^query_import_main_.*\.json/',  'include' => $path . 'production.import.inc', 'func' => 'production_query_import', 'archive' => 'prod/prod'];
  }
}

/**
 * menu callback
 * убрать материалы с главной
 */
function production_empty_front_page_callback()
{
  drupal_set_title('');
  return [];
}


/**
 * Implements hook_field_placeholder_info().
 */
function production_field_placeholder_info()
{
  // добавить поддержку виджета masked_input в модуле Field Placeholder
  return array(
    'masked_input' => 'value',
  );
}

/**
 * hook_form_FORM_ID_alter
 */
function production_form_alter(&$form, &$form_state, $form_id)
{
  if (!user_has_role(ROLE_ADMIN) && $form_id == 'views_exposed_form' && !empty($form["field_nomenklatura_target_id_selective"])) {
    $tids = array_keys($form["field_nomenklatura_target_id_selective"]["#options"]);
    array_shift($tids);
    foreach($form["field_nomenklatura_target_id_selective"]["#options"] as $tid => &$name) {
      if (is_numeric($tid)) {
        $nom_info = production_nomenklatura_get_info($tid);
        $name = $nom_info['label'];
      }
    }
  }

  if ($form_id == 'eck__entity__form_add_query_query' && !user_has_role(ROLE_ADMIN)) {
    if (!empty($_GET['type'])) {
      $form_state['data']['query']['type'] = $_GET['type'];
    }

    if ($companies = ext_user_get_companies_by_user()) {
      $form_state['data']['companies'] = array_keys($companies);
    }

    $filter = [];
    if (!empty($_SESSION["views"]["queries"]["default"]["field_month_value"]["value"]["month"])) {
      $filter = $_SESSION["views"]["queries"]["default"]["field_month_value"]["value"];
      $form_state['data']['filter'] = $filter;
    }

    // получить Запрос с которого сделана Корректировка
    if (!empty($_GET['last_query_id'])) {
      $last_query_wr = entity_metadata_wrapper('query', $_GET['last_query_id']);
      $form_state['data']['month_start'] = $last_query_wr->field_month->value();
      $form_state['data']['nom_tid'] = $last_query_wr->field_nomenklatura->getIdentifier();
      $form_state['data']['last_query'] = [
        'id' => $last_query_wr->getIdentifier(),
        'type' => $last_query_wr->field_query_type->value(),
        'volume' => $last_query_wr->field_qty->value(),
      ];
    }

    // получить Запрос, в котором есть Загрузка
    if (!empty($form_state['data']['last_query']['volume']) && !empty($form_state['data']['nom_tid']) && !empty($form_state['data']['month_start'])) {
      $dbr = db_select('eck_query', 'q');
      $dbr->addField('q', 'id');
      $dbr->innerJoin('field_data_field_month', 'fm', 'fm.entity_id = q.id');
      $dbr->condition('fm.field_month_value', $form_state['data']['month_start']);
      $dbr->innerJoin('field_data_field_nomenklatura', 'fn', 'fn.entity_id = q.id');
      $dbr->condition('fn.field_nomenklatura_target_id', $form_state['data']['nom_tid']);
      $dbr->innerJoin('field_data_field_load_json', 'flj', 'flj.entity_id = q.id');
      $dbr->condition('flj.field_load_json_value', '%' . db_like('pu_tid') . '%', 'LIKE');
      $dbr->addField('flj', 'field_load_json_value');
      $dbr->orderBy('q.id','DESC');
      $dbr->range(0,1);
      if ($result = $dbr->execute()->fetchAll()) {
        $query_db = reset($result);
        $source_query_wr = entity_metadata_wrapper('query', $query_db->id);
        $load_arr = drupal_json_decode($query_db->field_load_json_value);
        $load_period = production_query_load_get_period($load_arr);

        $form_state['data']['source_query'] = [
          'id' => $source_query_wr->getIdentifier(),
          'type' => $source_query_wr->field_query_type->value(),
          'volume' => $source_query_wr->field_qty->value(),
          'date_start' => $load_period['start'],
          'date_end' => $load_period['end'],
          'load' => $load_arr,
        ];
      }
    }

    // Даты
    if (!empty($form_state['data']['month_start'])) {
      $form["field_month"]["und"][0]["#default_value"]["value"] = $form_state['data']['month_start'];
      $form["field_month"]["und"][0]["#default_value"]["value2"] = $form_state['data']['month_start'];
      $form["field_month"]["und"][0]["#value"]["value"] = $form_state['data']['month_start'];
      $form["field_month"]["und"][0]["#value"]["value2"] = $form_state['data']['month_start'];
    }
    if (empty($form_state["data"]["source_query"]["date_start"]) || empty($form_state["data"]["source_query"]["date_end"])) {
      if ($filter && $filter['month'] && $filter['month'] != date('n')) {
        $day_start = gmmktime(0, 0, 0, $filter['month'], 1, $filter['year']);
        $next_month_start = gmmktime(0, 0, 0, date('n', $day_start) + 1, 1, date('Y', $day_start));
      } else {
        $day_start = gmmktime(0, 0, 0, date('n'), date('j')+1, date('Y'));
        $next_month_start = gmmktime(0, 0, 0, date('n', $day_start) + 1, 1, date('Y', $day_start));
      }
      $form["field_query_period"]["und"][0]["#default_value"]["value"] = $day_start;
      $form["field_query_period"]["und"][0]["#default_value"]["value2"] = $next_month_start-24*3600;
    } else {
      $day_start_start = $form_state['data']['source_query']['date_start'];
      $day_end_start = $form_state['data']['source_query']['date_end'];
      $today_start = gmmktime(0, 0, 0, date('n'), date('j'), date('Y'));
      if ($day_start_start <= $today_start) {
        $day_start_start = gmmktime(0, 0, 0, date('n'), date('j')+1, date('Y'));
        if (date('j', $day_end_start) <= date('j')) {
          $day_end_start = gmmktime(0, 0, 0, date('n', $day_start_start), date('t', $day_start_start), date('Y', $day_start_start));
        }
      }
      $form["field_query_period"]["und"][0]["#default_value"]["value"] = $day_start_start;
      $form["field_query_period"]["und"][0]["#default_value"]["value2"] = $day_end_start;

      // при добавлении в последний день месяца даты будут указывать на следующий
      // изменить месяц заявки
      if (date('n', $day_start_start) != date('n', $form_state['data']['month_start'])) {
        $month_start = gmmktime(0, 0, 0, date('n', $day_start_start), 1, date('Y', $day_start_start));
        $form["field_month"]["und"][0]["#default_value"]["value"] = $month_start;
        $form["field_month"]["und"][0]["#default_value"]["value2"] = $month_start;
        $form["field_month"]["und"][0]["#value"]["value"] = $month_start;
        $form["field_month"]["und"][0]["#value"]["value2"] = $month_start;
        $form_state['data']['month_start'] = $month_start;
      }
    }

    // todo возможно запросы от клиента нужно типизировать только как request, а изменение плана производством - correction
    // todo узнать в 1с что зависит от типа
    $form["field_query_type"]["und"]["#default_value"][0] = empty($form_state['data']['month_start']) || !production_query_approved_plan_get($form_state['data']['month_start']) ? 'request' : 'correction';
    drupal_set_title('Заявка на производство');

    if (!empty($form_state['data']['source_query'])) {
      drupal_set_title('Корректирующая заявка');

      // todo статусы менеджера и клиента пересекаются.
      // todo возможно ли перенести статусы в одно поле? какая логика зависит от двух статусов?
      if (user_has_role(ROLE_MANAGER_PRODUCTION)) {
        $form["field_query_status_client"]["und"]["#default_value"][0] = 'processing';
        $form["field_query_status_manager"]["und"]["#default_value"][0] = 'approved';
        $form["field_query_status_manager"]['#access'] = false;
      } else {
        $form["field_query_status_client"]["und"]["#default_value"][0] = 'approved';
        $form["field_query_status_manager"]["und"]["#default_value"][0] = 'processing';
      }
    }

    // если задан исходный Запрос
    // задать дефолтные значения
    if (!empty($form_state['data']['last_query']['volume'])) {
      $form['old_qty'] = [
        '#type' => 'item',
        '#title' => 'Утверждённое количество',
        '#markup' => '<div class ="form-markup">' . number_format($form_state['data']['last_query']['volume'], 0, '', ' ') . '</div>',
        '#wrapper_attributes' => ['class' => ['field-name-old-qty']],
        '#weight' => 2,
      ];
      $form["field_qty"]["und"][0]["value"]["#title"] = 'Новое количество';
      $form["field_qty"]["und"][0]["value"]["#default_value"] = $form_state['data']['last_query']['volume'];
    }


    if (!empty($form_state['data']['nom_tid'])) {
      $form["field_nomenklatura"]["und"]["#default_value"] = [$form_state['data']['nom_tid']];
    }

  }


  if (in_array($form_id, ['eck__entity__form_add_query_query', 'eck__entity__form_edit_query_query']) && !user_has_role(ROLE_ADMIN)) {
    if (!isset($nomenklatura_from_queries)) $nomenklatura_from_queries = [];
    $produce_units_list = production_produce_units_get_list();

    // обработать кнопку добавления Установки
    if (isset($form_state["triggering_element"]) && $form_state["triggering_element"]["#name"] == 'pu_add' && isset($form_state['values']['pu_select'])) {
      $form_state['data']['produce_units'][$form_state['values']['pu_select']] = [
        'tid' => $form_state['values']['pu_select'],
        'name' => $produce_units_list[$form_state['values']['pu_select']]->name,
        'performance' => null,
      ];
    }

    $form["field_qty"]["#weight"] = 3;
    $form["field_query_period"]["#weight"] = 5;

    if (!user_has_role(ROLE_ADMIN)) {
      $form["field_oc_id"]["#access"] = false;
      $form["field_load_json"]["#access"] = false;
      $form["field_query_load_snapshot"]["#access"] = false;
      $form["field_query_type"]["#access"] = false;
      $form["field_query_notifications"]["#access"] = false;
      $form["field_query_status_client"]["#access"] = false;
      $form["field_query_status_manager"]["und"]["#title"] = 'Статус заявки';
      $form["actions"]["submit"]["#value"] = 'Сохранить и отправить';

      if (!empty($form_state['data']['last_query']['id'])) {
        $form["field_nomenklatura"]['#disabled'] = true;
        $form["field_month"]['#disabled'] = true;
      } else {
        $form["field_month"]['#access'] = false;
        $form["field_query_period"]["#weight"] = 0;
      }

      if ($form["field_query_type"]["und"]["#default_value"][0] == 'cancel') {
        $form["field_qty"]['#disabled'] = true;
        $form["actions"]["submit"]["#attributes"]['class'][] = 'btn-danger';
        $form["actions"]["submit"]["#value"] = 'Отменить производство';
      }

      // если Заявка создана клиентом, то менеджеру не показывать причину и необходимость согласования
      if ((!empty($form_state["query"]->is_new) && !user_has_role(ROLE_MANAGER_PRODUCTION))
        || empty($form_state["query"]->is_new) && !user_has_role(ROLE_MANAGER_PRODUCTION, user_load($form_state["query"]->uid))) {
        $form["field_query_reason"]["#access"] = false;
        $form["field_query_client_approve"]["#access"] = false;
      }

      // ограничить возможности клиентов
      if (!user_has_role(ROLE_MANAGER_PRODUCTION, $GLOBALS['user'])) {
        $form["field_query_status_manager"]["#access"] = false;
        $form["field_query_client_approve"]["#access"] = false;
        $form["field_query_client_approve"]["und"]["#default_value"] = 1;
        // для клиента причина - по инициативе заказчика
        $form["field_query_reason"]["#access"] = false;
        $form["field_query_reason"]["und"]["#default_value"] = [553];

        // ограничить Номенклатуру текущим юзером
        $options = [];
        if ($companies = ext_user_get_companies_by_user()) {
          $query = new EntityFieldQuery();
          $result = $query
            ->entityCondition('entity_type', 'taxonomy_term')
            ->propertyOrderBy('name')
            ->propertyCondition('vid', taxonomy_vocabulary_machine_name_load('nomenklatura')->vid)
            ->fieldCondition('field_client', 'tid', array_keys($companies), 'IN')
            ->execute();
          if ($result) {
            foreach (array_keys($result['taxonomy_term']) as $nom_tid) {
              $nom_info = production_nomenklatura_get_info($nom_tid);
              if (!empty($form["field_nomenklatura"]["und"]["#options"][$nom_tid])
                && strpos($form["field_nomenklatura"]["und"]["#options"][$nom_tid], '_') !== 0) {

                // при добавлении новой Заявки исключить Номенклатуру, по которой есть Заявки
                if (empty($form_state['data']['last_query']) && in_array($nom_tid, $nomenklatura_from_queries)) continue;

                $options[$nom_tid] = $nom_info['label'];
              }
            }
          }
        }
        if (!$options) {
          $options[0] = 'Номенклатура отсутствует';
        }
        $form["field_nomenklatura"]["und"]["#options"] = $options;
        if (!$form["field_nomenklatura"]["und"]["#default_value"] || empty($options[current($form["field_nomenklatura"]["und"]["#default_value"])])) {
          $form["field_nomenklatura"]["und"]["#default_value"] = array_key_first($options);
        }
      } else {
        // убрать для менеджера причины Клиента
        unset($form["field_query_reason"]["und"]["#options"][553]);
      }
    }

    $form['#attributes']['class'] = ['query-form'];

    if (empty($form_state['data'])) $form_state['data'] = [];

    if (empty($form_state["query"]->is_new)) {
      $query_wr = entity_metadata_wrapper('query', $form_state["query"]);
      $form_state['data']['query']['id'] = $query_wr->getIdentifier();
      $form_state['data']['query']['volume'] = $query_wr->field_qty->value();
    }

    $month_start = empty($form_state['data']['month_start']) ? 0 : $form_state['data']['month_start'];

    // текущую Загрузку извлекаем:
    // - для новой Заявки из предыдущей Заявки с заданной Загрузкой (если есть)
    // - для редактируемой - из неё самой
    $load_query_id = null;
    if (!empty($form_state['data']['query']['id'])) {
      $load_query_id = $form_state['data']['query']['id'];
    } elseif(!empty($form_state['data']['source_query']['id'])) {
      $load_query_id = $form_state['data']['source_query']['id'];
    }
    if ($load_query_id) {
      $load_query_wr = entity_metadata_wrapper('query', $load_query_id);
      if ($load_query_id && $load_query_wr->value()) {
        if ($load_query_wr->field_nomenklatura->value()) {
          $nom_tid = $load_query_wr->field_nomenklatura->tid->value();
        } else {
          $nom_tid = empty($form["field_nomenklatura"]["und"]["#default_value"][0]) ? array_key_first($form["field_nomenklatura"]["und"]["#options"]) : $form["field_nomenklatura"]["und"]["#default_value"][0];
        }

        if ($form["field_query_type"]["und"]["#default_value"][0] != 'cancel') {
          if ($nom_tid) {
            // получить Установки, уже выбранные в данной форме
            $produce_units = empty($form_state['data']['produce_units']) ? [] : $form_state['data']['produce_units'];

            // получить Установки и их Загрузку из Запроса
            $load_produce_units = production_produce_units_get_from_query_json($load_query_wr->value());
            foreach($load_produce_units as $pu_tid => $pu_item) {
              if (empty($produce_units[$pu_tid])) $produce_units[$pu_tid] = $pu_item;
            }

            $form_state['data']['produce_units'] = $produce_units;
          }
        }
      }
    }


    // добавить в форму установки ------------------------------------------------------------------------------------
    $produce_units = empty($form_state['data']['produce_units']) ? [] : $form_state['data']['produce_units'];

    if ($produce_units) {
      $form['produce_units'] = [
        '#type' => 'container',
        '#attributes' => [
          'id' => ['produce-units-wrapper'],
          'class' => ['produce-units-wrapper'],
        ],
        '#weight' => 6,
      ];

      foreach ($produce_units as $pu_tid => $produce_unit) {
        $produce_units_load = production_produce_unit_get_load($month_start, $pu_tid, $load_query_id);
        $form['produce_units']['pu_' . $pu_tid] = [
          '#markup' => theme('produce_unit_load', ['produce_unit' => $produce_units_load[$pu_tid], 'month_start' => $month_start, 'show_amount' => false,  'show_nomenklatura' => false]),
        ];
      }

//      foreach ($produce_units as $pu_tid => $produce_unit) {
//        $produce_units_load = production_produce_unit_get_load($month_start, $pu_tid, $load_query_id);
//        $produce_unit_load = $produce_units_load[$pu_tid]['load'];
//
//        $form['produce_units']['pu_' . $pu_tid] = [
//          '#type' => 'container',
//          '#attributes' => ['class' => ['produce-unit']],
//          '#weight' => 3,
//        ];
//        $form['produce_units']['pu_' . $pu_tid]['name'] = [
//          '#type' => 'item',
//          '#title' => 'Установка',
//          '#markup' => '<h3>' . $produce_unit['name'] . '</h3>',
//          '#wrapper_attributes' => ['class' => ['produce-unit-name']],
//        ];
//
//        $form['produce_units']['pu_' . $pu_tid]['selection'] = [
//          '#type' => 'container',
//          '#attributes' => ['class' => ['produce-unit-dates', 'form-item']],
//        ];
//        $form['produce_units']['pu_' . $pu_tid]['selection']['title'] = [
//          '#markup' => '<label class="control-label">Даты</label>',
//        ];
//
//        $form['produce_units']['pu_' . $pu_tid]['selection']['dates'] = [
//          '#type' => 'container',
//          '#attributes' => ['class' => ['form-checkboxes']],
//          '#suffix' => '<div class="produce-unit-legenda"><span></span>- установка свободна <span class="unavailable"></span>- установка недоступна <span class="loaded"></span>- установка занята <span class="selected"></span>- даты производства</div>',
//        ];
//
//        // цикл по количеству дней в месяце
//        for ($i = 1; $i <= date("t", $month_start); $i++) {
//          $day_start = $month_start + ($i - 1) * 60 * 60 * 24;
//
//          $produce_unit_is_busy = !empty($produce_unit_load[$day_start]['is_busy']);
//          $produce_unit_has_current_load = (int)!empty($produce_unit_load[$day_start]['is_current']);
//          $produce_unit_is_unavailable = (int)!empty($produce_unit_load[$day_start]['is_unavailable']);
//          $classes = empty($produce_unit_load[$day_start]['classes']) ? [] : $produce_unit_load[$day_start]['classes'];
//
//          // вывести подсказку при наведении с выходом продукции в этот день
//          $tooltip = empty($produce_unit_load[$day_start]['is_current_load']) ? '' : ' data-toggle="tooltip" data-placement="top" title="' . $produce_unit_load[$day_start]['output'] . '"';
//
//          // при создании заявки даты можно выбирать, при редактировании нет
//          if (!empty($form_state['query']->is_new) && user_has_role(ROLE_MANAGER_PRODUCTION)) {
//            $form['produce_units']['pu_' . $pu_tid]['selection']['dates']['check_' . $pu_tid . '_' . $i] = [
//              '#type' => 'checkbox',
//              '#title' => '<span>' . $i . '</span>',
//              '#disabled' => ($produce_unit_is_busy && !$produce_unit_has_current_load) || ($produce_unit_is_unavailable && !user_has_role(ROLE_MANAGER_PRODUCTION)),
//              '#default_value' => $produce_unit_has_current_load,
//              '#attributes' => ['class' => $classes],
//            ];
//            if ($tooltip) {
//              $form['produce_units']['pu_' . $pu_tid]['selection']['dates']['check_' . $pu_tid . '_' . $i]['#wrapper_attributes'] = [
//                'data-toggle' => 'tooltip',
//                'data-placement' => 'top',
//                'title' => empty($produce_unit_load[$day_start]['is_current_load']) ? '' : $produce_unit_load[$day_start]['output'],
//              ];
//            }
//          } else {
//            $form['produce_units']['pu_' . $pu_tid]['selection']['dates']['check_' . $pu_tid . '_' . $i]['#markup'] = '<span class="c-box ' . implode(' ', $classes) . '"' . $tooltip . '>' . $i . '</span>';
//          }
//        }
//
//        // производительность
//        $form['produce_units']['pu_' . $pu_tid]['performance_' . $pu_tid] = [
//          '#type' => 'textfield',
//          '#title' => 'Производительность',
//          '#required' => true,
//          '#access' => user_has_role(ROLE_MANAGER_PRODUCTION),
//          '#default_value' => empty($produce_unit['performance']) ? 0 : $produce_unit['performance'],
//          '#wrapper_attributes' => ['class' => ['produce-unit-performance']],
//        ];
//
//      }
    }

    $form["field_comment"]["und"][0]["value"]["#required"] = !user_has_role(ROLE_MANAGER_PRODUCTION);

    $form["#validate"][] = 'production_form_eck__entity__form_query_query_validate';
    $form["#submit"][] = 'production_form_eck__entity__form_query_query_submit';
    $form["actions"]["submit"]["#name"] = 'eck_submit';
  }

  // дополнительный обработчик сабмита
  if (in_array($form_id, ['eck__entity__form_add_query_query', 'eck__entity__form_edit_query_query'])
      || ($form_id == 'eck__entity__delete_form' && $form["entity"]["#value"]->type == 'query')) {
    $form["#submit"][] = 'production_form_redirect_submit';
  }
}

//function production_form_produce_unit_add_ajax_callback($form, &$form_state)
//{
//  return $form;
//}

/**
 * production_form_eck__entity__form validate callback
 */
function production_form_eck__entity__form_query_query_validate(&$form, &$form_state)
{
  if ($form_state["triggering_element"]["#name"] == 'eck_submit') {
    // обычно месяц задан и не доступен для смены
    if (empty($form_state['data']['month_start'])) {
      $month_value = $form_state["values"]["field_query_period"]["und"][0]["value"];
    } else {
      $month_value = $form_state['data']['month_start'];
    }
    $month_start = gmmktime(0, 0, 0, date('n', $month_value), 1, date('Y', $month_value));
    $form_state["values"]["field_month"]["und"][0]["value"] = $month_start;
    $form_state["values"]["field_month"]["und"][0]["value2"] = $month_start;

    // проконтролировать, что период задан в рамках текущего месяца и не ранее сегодня
    if (!user_has_role(ROLE_MANAGER_PRODUCTION) && !user_has_role(ROLE_ADMIN)) {
      $next_day_start = gmmktime(0, 0, 0, date('n'), date('j')+1, date('Y'));
      $period_start = is_numeric($form_state["values"]["field_query_period"]["und"][0]["value"]) ? $form_state["values"]["field_query_period"]["und"][0]["value"] : strtotime($form_state["values"]["field_query_period"]["und"][0]["value"]);
      $period_end = is_numeric($form_state["values"]["field_query_period"]["und"][0]["value2"]) ? $form_state["values"]["field_query_period"]["und"][0]["value2"] : strtotime($form_state["values"]["field_query_period"]["und"][0]["value2"]);
      $next_month_period_start = gmmktime(0, 0, 0, date('n', $period_start) + 1, 1, date('Y', $period_start));
      if ($period_start < $next_day_start) {
        form_set_error('field_query_period', 'Дата не может быть задана ранее, чем завтра.');
        return false;
      }
      if ($period_end >= $next_month_period_start) {
        form_set_error('field_query_period', 'Конечная дата выходит за рамки одного месяца.');
        return false;
      }
    }

    // Номенклатура Пользователя из Заявок текущего Месяца
    // чтобы исколючить выбор Номенклатуры по которой есть Заявки
    if (empty($form_state["data"]["nom_tid"]) && !empty($form_state['data']['companies'])) {
      $dbr = db_select('eck_query', 'q');
      $dbr->addField('q', 'id');
      $dbr->innerJoin('field_data_field_nomenklatura', 'fn', 'fn.entity_id = q.id');
      $dbr->condition('fn.field_nomenklatura_target_id', $form_state["values"]["field_nomenklatura"]["und"][0]["target_id"]);
      $dbr->innerJoin('field_data_field_month', 'fm', 'fm.entity_id = q.id');
      $dbr->condition('fm.field_month_value', $month_start);
      if ($dbr->execute()->fetchCol()) {
        form_set_error('field_nomenklatura', 'По данному наименованию уже есть заявки на заданный месяц. Для внесения правок воспользуйтесь кнопкой "Создать корректировку".');
        return false;
      }
    }

    // если заданы даты для Установки, сохранить их и проверить наличие Производительности
//    if (isset($form_state["data"]["produce_units"])) {
//      $volume = $form_state["values"]["field_qty"]["und"][0]["value"];
//      foreach ($form_state["data"]["produce_units"] as $produce_unit_tid => $produce_unit) {
//        $pu_load = [];
//        $performance = $form_state['values']['performance_' . $produce_unit_tid] ? $form_state['values']['performance_' . $produce_unit_tid] : 0;
//        $form_state["data"]["produce_units"][$produce_unit_tid]['performance'] = $performance;
//        if (!$performance) {
//          form_set_error('performance_' . $produce_unit_tid, 'Не задана производительность установки');
//          return false;
//        }
//        $today_start = gmmktime(0, 0, 0, date('n'), date('j'), date('Y'));
//
//        // посчитать уже произведённое количество
//        $output_produced = !empty($form_state['data']['source_query']['load']) ? production_query_load_get_produced($form_state['data']['source_query']['load'], $today_start) : 0;
//
//        if ($volume < $output_produced) {
//          form_set_error('field_qty', 'Заданное количество меньше уже произведённого.');
//          return false;
//        }
//
//        // Сформировать Загрузку для выбранной установки.
//        // Загрузку с выходом 0 (когда дат задано больше чем хватает Количества) тоже сохраняем,
//        // нужна для сравнения старой и заданной Загрузок.
//        // Исключим загрузку с 0 на этапе сохранения.
//        // Сохранить размеры значений выхода продукции в уже произведённой Загрузке.
//        $output_total = 0;
//        foreach ($form_state['values'] as $key => $value) {
//          if (strpos($key, 'check_' . $produce_unit_tid) === 0 && $value === 1) {
//            $day = str_replace('check_' . $produce_unit_tid . '_', '', $key);
//            $day_start = $month_start + ($day - 1) * 60 * 60 * 24;
//            // вычислить выход на день (Производительность или Остаток)
//            // если Загрузка этого дня уже произведена, взять выход из неё (в последнем дне может быть меньше)
//            if ($day_start <= $today_start                                                            // в день Заявки Загрузка считается произведённой
//              && !empty($form_state['data']['source_query']['load'][$produce_unit_tid]['pu_load'][$day_start])) {
//              $output = $form_state['data']['source_query']['load'][$produce_unit_tid]['pu_load'][$day_start];
//            } else {
//              $output = $volume - $output_total >= $performance ? $performance : $volume - $output_total;
//            }
//            if ($output < 0) $output = 0;
//            $output_total += $output;
//
//            $pu_load[$day_start] = $output;
//          }
//        }
//        $form_state['data']['query']['load'][$produce_unit_tid] = [
//          'pu_tid' => $produce_unit_tid,
//          'pu_load' => $pu_load,
//        ];
//      }
//
//      // сохраняем load_json
//      if (isset($form_state['data']['query']['load'])) {
//        $form_state["values"]['field_load_json']['und'][0]['value'] = $form_state['data']['query']['load'];
//      }
//    }
  }
}

/**
 * production_form_eck__entity__form submit callback
 */
function production_form_eck__entity__form_query_query_submit(&$form, &$form_state)
{
  // статус старой Заявки изменить на Отказано
  if (!empty($form_state["data"]["last_query"]['id'])) {
    $last_query_wr = entity_metadata_wrapper('query', $form_state['data']['last_query']['id']);
    if ($last_query_wr->field_query_status_manager->value() == 'processing') {
      $last_query_wr->field_query_status_manager = 'deny';
      $last_query_wr->save();
    }
  }

  $query_wr = entity_metadata_wrapper('query', $form_state["values"]["entity"]->id);

  // экспорт новой заявки
  production_query_export($query_wr);

  // отправить email менеджерам
  $params = [
    'qid' => $query_wr->getIdentifier(),
    'month' => t(date('F', $query_wr->field_month->value())),
    'year' => date('Y', $query_wr->field_month->value()),
    'product' => $query_wr->field_nomenklatura->name->value(),
    'product_owner_id' => $query_wr->field_nomenklatura->field_client->getIdentifier(),
    'status_client' => $query_wr->field_query_status_client->label(),
    'status_manager' => $query_wr->field_query_status_manager->label(),
    'client_approve' => $query_wr->field_query_client_approve->value(),
    'type' => $query_wr->field_query_type->value(),
    'reason' => $query_wr->field_query_reason->value() ? $query_wr->field_query_reason->name->value() : '',
    'comment' => $query_wr->field_comment->value(),
  ];


  if ($managers = production_managers_get_to_notify()) {
    foreach ($managers as $manager) {
      drupal_mail('mailer', 'manager_notify_query_correction_new', $manager->mail, user_preferred_language($manager), $params);
    }
  }
}

function production_form_redirect_submit(&$form, &$form_state)
{
  if (!user_has_role(ROLE_ADMIN)) {
    $form_state['redirect'] = user_has_role(ROLE_MANAGER_PRODUCTION) ? 'production/manage' : 'production/queries';
  }
}

function production_import_form($form, &$form_state)
{
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type'  => 'submit',
    '#name'  => 'delete',
    '#value' => 'Сабмит',
  );

//  $form['#submit'][] = 'production_import_submit';

  return $form;
}

function production_delete_form($form, &$form_state)
{
  $form['month'] = array(
    '#type' => 'date_select',
    '#title' => t('Sample from'),
    '#date_format' => 'm.Y',
    '#default_value' => array(
      'month' => date('n'),
      'year' => date('Y'),
    ),
  );

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['delete'] = array(
    '#type'  => 'submit',
    '#name'  => 'delete',
    '#value' => 'Удалить заявки за месяц',
  );

  $form['actions']['delete_all'] = array(
    '#type'  => 'submit',
    '#name'  => 'delete_all',
    '#value' => 'Удалить все заявки',
  );

  $form['#submit'][] = 'production_delete_submit';

  return $form;
}
function production_delete_submit($form, &$form_state)
{
  if ($form_state["triggering_element"]["#name"] == 'delete') {
    $date_array = explode('-', $form_state["values"]["month"]);
    $month_start = gmmktime(0, 0, 0, $date_array[1], 1, $date_array[0]);
    production_queries_delete($month_start);
  } elseif ($form_state["triggering_element"]["#name"] == 'delete_all') {
    production_queries_delete();
  }
}



function production_reason_get_by_1c_id($oc_id)
{
  $vid = taxonomy_vocabulary_machine_name_load('reasons')->vid;
  $query = new EntityFieldQuery();
  $terms = $query
    ->entityCondition('entity_type', 'taxonomy_term')
    ->propertyCondition('vid', $vid)
    ->fieldCondition('field_reason_oc_id', 'value', $oc_id)
    ->execute();
  if ($terms) {
    // если найдено несколько, это ошибка. записать в лог
    if (count($terms) > 1) {
      watchdog('import', 'Найдено несколько записей Причин по 1с ID: @id', ['@id' => $oc_id], WATCHDOG_WARNING);
    }
    $term = reset($terms['taxonomy_term']);
  } else {
    $term = (object)array(
      'vid' => $vid,
      'name' => 'Причина с 1c ID "' . $oc_id . '" не импортирована',
      'field_reason_oc_id' => ['und' => [0 => ['value' => $oc_id]]],
    );
    taxonomy_term_save($term);
  }
  $entities = entity_load('taxonomy_term', [$term->tid]);

  return empty($entities) ? false: reset($entities);
}

function production_company_get_by_1c_id($oc_id)
{
  $vid = taxonomy_vocabulary_machine_name_load('clients')->vid;
  $query = new EntityFieldQuery();
  $terms = $query
    ->entityCondition('entity_type', 'taxonomy_term')
    ->propertyCondition('vid', $vid)
    ->fieldCondition('field_1c_id', 'value', $oc_id)
    ->execute();
  if ($terms) {
    // если найдено несколько, это ошибка. записать в лог
    if (count($terms) > 1) {
      watchdog('import', 'Найдено несколько записей Компании по 1с ID: @id', ['@id' => $oc_id], WATCHDOG_WARNING);
    }
    $term = reset($terms['taxonomy_term']);
  } else {
    $term = (object)array(
      'vid' => $vid,
      'name' => 'Компания с 1c ID "' . $oc_id . '" не импортирована',
      'field_1c_id' => ['und' => [0 => ['value' => $oc_id]]],
    );
    taxonomy_term_save($term);
  }
  $entities = entity_load('taxonomy_term', [$term->tid]);

  return empty($entities) ? false: reset($entities);
}

function production_managers_get_to_notify()
{
  $dbr = db_select('users', 'u');
  $dbr->condition('u.status', 1);
  $dbr->innerJoin('users_roles', 'ur', 'ur.uid = u.uid');
  $dbr->condition('ur.rid', ROLE_MANAGER_PRODUCTION);
  $dbr->innerJoin('field_data_field_notify_query', 'nq', 'nq.entity_id = u.uid');
  $dbr->condition('nq.field_notify_query_value', 1);
  $dbr->addField('u', 'uid');
  return ($result = $dbr->execute()->fetchCol()) ? user_load_multiple($result, []) : false;
}

/**
 * Найти номенклатуру по 1с ID, а если нет, то создать.
 * Артикул приходится передавать на случай, если какой-то из импортируемых файлов всё ещё не передаёт ID номенклатуры.
 * В таком случае, будет создана ном по артикулу, а затем для файла содержащего ID, ещё одна ном по ID.
 * Добавляем дополнительную проверку наличие ном по артикулу и заполнять пустой ID при наличии в файле.
 */
function production_nomenklatura_get_by_1c_params($id_1c, $artikul_1c)
{
  $term = production_nomenklatura_get_by_artikul($artikul_1c);
  // если ном найдена, там пустой ID, а в файле ID есть, задать ID
  if ($term && empty($term->field_1c_id['und'][0]['value']) && $id_1c) {
    $term->field_1c_id['und'][0]['value'] = $id_1c;
    taxonomy_term_save($term);
  }

  $vid = taxonomy_vocabulary_machine_name_load('nomenklatura')->vid;
  if ($id_1c) {
    $query = new EntityFieldQuery();
    $terms = $query
      ->entityCondition('entity_type', 'taxonomy_term')
      ->propertyCondition('vid', $vid)
      ->fieldCondition('field_1c_id', 'value', $id_1c)
      ->execute();
    if ($terms) {
      // если найдено несколько, это ошибка. записать в лог
      if (count($terms) > 1) {
        watchdog('import', 'Найдено несколько записей Номенклатуры по 1c ID: @id', ['@id' => $id_1c], WATCHDOG_WARNING);
      }
      $term = reset($terms['taxonomy_term']);
    }
  }

  if (!$term) {
    $term = (object)array(
      'vid' => $vid,
      'name' => 'Номенклатура с 1c ID "' . $id_1c . '" и артикулом "' . $artikul_1c . '" не импортирована',
    );
    if ($id_1c) $term->field_1c_id = ['und' => [0 => ['value' => $id_1c]]];
    if ($artikul_1c) $term->field_oc_artikul = ['und' => [0 => ['value' => $artikul_1c]]];
    taxonomy_term_save($term);
  }
  $entities = entity_load('taxonomy_term', [$term->tid]);

  return empty($entities) ? false: reset($entities);
}

function production_nomenklatura_get_by_artikul($artikul)
{
  $vid = taxonomy_vocabulary_machine_name_load('nomenklatura')->vid;
  $query = new EntityFieldQuery();
  $terms = $query
    ->entityCondition('entity_type', 'taxonomy_term')
    ->propertyCondition('vid', $vid)
    ->fieldCondition('field_oc_artikul', 'value', $artikul)
    ->execute();
  if ($terms) {
    // если найдено несколько, это ошибка. записать в лог
    if (count($terms) > 1) {
      watchdog('import', 'Найдено несколько записей Номенклатуры по артикулу: @id', ['@id' => $artikul], WATCHDOG_WARNING);
    }
    $term = reset($terms['taxonomy_term']);
    $entities = entity_load('taxonomy_term', [$term->tid]);
  }

  return empty($entities) ? false: reset($entities);
}

function production_nomenklatura_get_info($nom_tid)
{
  $fid = drupal_hash_base64(__FUNCTION__ . $nom_tid);
  $result = &drupal_static($fid);

  if (!isset($result)) {
    $result = [];
    if ($nom_tid === 0) {
      $result = [
        'id' => 0,
        'label' => 'Технические работы',
        'name' => 'Технические работы',
        'artikul' => '',
        'name_d' => '',
        'artikul_d' => '',
        'client_id' => 0,
      ];
    } else {
      $nom_wr = entity_metadata_wrapper('taxonomy_term', $nom_tid);
      if ($nom_wr->value()) {
        $name = $nom_wr->label();
        $client_id = $nom_wr->field_client->value() ? $nom_wr->field_client->getIdentifier() : 0;
        $oc_id = $nom_wr->field_1c_id->value();
        $artikul = $nom_wr->field_oc_artikul->value();
        $label = $name . ($artikul && $client_id == COMPANY_TD ? ' (' . $artikul . ')' : '');
        $name_d = $nom_wr->field_oc_name_davalec->value();
        $artikul_d = $nom_wr->field_oc_artikul_davalec->value();
        if ($name_d) {
          $label = $name_d . ($artikul_d ? ' (' . $artikul_d . ')' : '');
        }

        $result = [
          'id' => $nom_tid,
          'label' => $label,
          'name' => $name,
          'id_1c' => $oc_id,
          'artikul' => $artikul,
          'name_d' => $name_d,
          'artikul_d' => $artikul_d,
          'client_id' => $client_id,
        ];
      }
    }
  }

  return $result ? $result : false;
}

/**
 * Вернуть список Номенклатуры по заданным параметрам в массиве $params
 * 'month_ts' - unix timestamp, начало месяца, за который вернуть заявки
 * 'date_ts' -  unix timestamp, начало даты, включительно по которую вернуть заявки (по полю created)
 * 'pu_id' - tid установки
 * 'company_id' - tid клиента
 *
 * @return array - краткая информация по Ном
 **/
function production_nomenklatura_get_list($params)
{
  $fid = drupal_hash_base64(__FUNCTION__ . $params['month_ts'] . ($params['pu_id'] ?? '') . ($params['date_ts'] ?? ''));
  $result = &drupal_static($fid);

  if (!isset($result)) {
    $dbr = db_select('eck_query', 'q');
    if (!empty($params['month_ts'])) {
      $dbr->innerJoin('field_data_field_month', 'fm', 'fm.entity_id = q.id');
      $dbr->condition('fm.field_month_value', $params['month_ts']);
    }
    $dbr->innerJoin('field_data_field_query_type', 'ft', 'ft.entity_id = q.id');
    $dbr->condition('ft.field_query_type_value', 'service', '<>');
    $dbr->innerJoin('field_data_field_nomenklatura', 'fn', 'fn.entity_id = q.id');
    $dbr->addField('fn', 'field_nomenklatura_target_id', 'nom_id');
    if (!empty($params['date_ts'])) {
      $dbr->condition('q.created', $params['date_ts'], '<=');
    }
    if (!empty($params['pu_id'])) {
      $dbr->innerJoin('field_data_field_load_json', 'flj', 'flj.entity_id = q.id');
      $dbr->condition('flj.field_load_json_value', '%' . db_like('"pu_tid":"' . $params['pu_id'] . '"') . '%', 'LIKE');
    }
    $dbr->innerJoin('field_data_field_client', 'fc', 'fc.entity_id = fn.field_nomenklatura_target_id');
    if (!empty($params['company_id'])) {
      $dbr->condition('fc.field_client_tid', $params['company_id']);
    }
    $dbr->addField('fc', 'field_client_tid', 'company_id');
    $dbr->distinct();
    $result = $dbr->execute()->fetchAllAssoc('nom_id');
  }

  return $result;
}

/**
 * Вернуть список Номенклатуры на Месяц
 * можно уточнить Установку и Дату, на которую собрать список
 **/
function production_nomenklatura_get_old($month_start, $produce_unit_tid = null, $date = null)
{
  $fid = drupal_hash_base64(__FUNCTION__ . $month_start . ($produce_unit_tid ? $produce_unit_tid : '') . ($date ? $date : ''));
  $result = &drupal_static($fid);

  if (!isset($result)) {
    $dbr = db_select('eck_query', 'q');
    $dbr->innerJoin('field_data_field_month', 'fm', 'fm.entity_id = q.id');
    $dbr->condition('fm.field_month_value', $month_start);
    $dbr->innerJoin('field_data_field_query_type', 'ft', 'ft.entity_id = q.id');
    $dbr->condition('ft.field_query_type_value', 'service', '<>');
    $dbr->innerJoin('field_data_field_nomenklatura', 'fn', 'fn.entity_id = q.id');
    $dbr->addField('fn', 'field_nomenklatura_target_id', 'nom_tid');
    if ($date) {
      $dbr->condition('q.created', $date, '<=');
    }
    if ($produce_unit_tid) {
      $dbr->innerJoin('field_data_field_load_json', 'flj', 'flj.entity_id = q.id');
      $dbr->condition('flj.field_load_json_value', '%' . db_like('"pu_tid":"' . $produce_unit_tid . '"') . '%', 'LIKE');
    }
    $dbr->innerJoin('field_data_field_client', 'fc', 'fc.entity_id = fn.field_nomenklatura_target_id');
    $dbr->addField('fc', 'field_client_tid', 'client_id');
    $dbr->distinct();
    $result = $dbr->execute()->fetchAllAssoc('nom_tid');
  }

  return $result;
}

function production_nomenklatura_get_list_by_client_id($client_id)
{
  $dbr = db_select('taxonomy_term_data', 't');
  $dbr->condition('t.vid', taxonomy_vocabulary_machine_name_load('nomenklatura')->vid);
  $dbr->addField('t', 'tid');
  $dbr->innerJoin('field_data_field_client', 'fc', 'fc.entity_id = t.tid');
  $dbr->condition('fc.field_client_tid', $client_id);
  $dbr->orderBy('t.name');
  $result = $dbr->execute()->fetchCol();

  return $result;
}

//function production_get_messages_html($data)
//{
//  $messages_html = '';
//  if ($messages = unserialize($data)) {
//    foreach ($messages as $time => $message) {
//      $messages_html .=
//        '<div>' .
//        '<div>' . date('d.m.y h:m', $time) . '</div>' .
//        '<div>' . ($message['from'] == 'user' ? '&nbsp;>>&nbsp;' : '&nbsp;<<&nbsp;') . '</div>' .
//        '<div>' . $message['message'] . '</div>' .
//        '</div>';
//    }
//  }
//
//  return '<div>' . $messages_html . '</div>';
//}



/**
 * - Query ---------------------------------------------------------------------------------------------------------
 */

function production_query_get_info($query)
{
  $query_wr = entity_metadata_wrapper('query', $query);
  $plan = $fact = 0;
  if ($load = drupal_json_decode($query_wr->field_load_json->value())) {
    $today_start = gmmktime(0, 0, 0, date('n'), date('j'), date('Y'));
    foreach ($load as $pu_tid => $pu_item) {
      foreach ($pu_item['pu_load'] as $date_start => $output) {
        $plan += $output;
        if ($date_start < $today_start) $fact += $output;
      }
    }
  }

  return [
    'id' => $query_wr->getIdentifier(),
    'output' => [
      'plan' => $plan,
      'fact' => $fact,
    ],
  ];
}

function production_query_check_is_last_approved($query_id, $month_start)
{
  $query_wr = entity_metadata_wrapper('query', $query_id);
  $query_nom_tid = $query_wr->field_nomenklatura->getIdentifier();

  // является ли текущая Заявка последней утверждённой
  $dbr = db_select('eck_query', 'q');
  $dbr->addField('q', 'id');
  $dbr->innerJoin('field_data_field_month', 'fm', 'fm.entity_id = q.id');
  $dbr->condition('fm.field_month_value', $month_start);
  $dbr->innerJoin('field_data_field_query_type', 'ft', 'ft.entity_id = q.id');
  $dbr->condition('ft.field_query_type_value', 'service', '!=');
  $dbr->innerJoin('field_data_field_nomenklatura', 'fn', 'fn.entity_id = q.id');
  $dbr->condition('fn.field_nomenklatura_target_id', $query_nom_tid);
  $dbr->innerJoin('field_data_field_query_status_client', 'fsc', 'fsc.entity_id = q.id');
  $dbr->condition('fsc.field_query_status_client_value', 'approved');
  $dbr->innerJoin('field_data_field_query_status_manager', 'fsm', 'fsm.entity_id = q.id');
  $dbr->condition('fsm.field_query_status_manager_value', 'approved');
  $dbr->orderBy('q.id', 'DESC');
  $dbr->range(0, 1);
  if ($result = $dbr->execute()->fetchField()) {
    return $result == $query_id;
  }
}
function production_query_make_copy($source_query)
{
  $query_new = entity_create('query', [
    'type' => 'query',
    'created' => REQUEST_TIME,
    'uid' => 0,
  ]);
  entity_save('query', $query_new);

  $source_query_wr = entity_metadata_wrapper('query', $source_query->id);

  $query_new_wr = entity_metadata_wrapper('query', $query_new);
  $query_new_wr->field_month = $source_query_wr->field_month->value();
  $query_new_wr->field_nomenklatura = $source_query_wr->field_nomenklatura->value();
  $query_new_wr->field_query_type = $source_query_wr->field_query_type->value();
  $query_new_wr->field_query_status_client = 'approved';
  $query_new_wr->field_query_status_manager = 'approved';
  $query_new_wr->field_qty = $source_query_wr->field_qty->value();
  $query_new_wr->field_query_reason = $source_query_wr->field_query_reason->value();
  $query_new_wr->field_comment = $source_query_wr->field_comment->value();
  $query_new_wr->field_oc_id = $source_query_wr->field_oc_id->value();
  $query_new_wr->field_query_period = ['value' => $source_query_wr->field_query_period->value->value(), 'value2' => $source_query_wr->field_query_period->value2->value()];
  $query_new_wr->field_load_json = $source_query_wr->field_load_json->value();
  $result = $query_new_wr->save();

  return isset($result->id) ? $result->id : false;
}

function production_query_get_by_oc_id($oc_id, $month_start)
{
  $efquery = new EntityFieldQuery();
  $result = $efquery
    ->entityCondition('entity_type', 'query')
    ->fieldCondition('field_oc_id', 'value', $oc_id)
    ->fieldCondition('field_month', 'value', $month_start)
    ->execute();
  if ($result) {
    $entities = entity_load('query', [reset($result['query'])->id]);
  }
  return empty($entities) ? false: reset($entities);
}

function production_query_export($query_wr)
{
  $query_arr = [
    'id' => $query_wr->getIdentifier(),
    'id_1c' => '',
    'created' => date('d.m.Y H:i:s', $query_wr->created->value()),
    'month' => date('d.m.Y', $query_wr->field_month->value()),
    'nom_id' => $query_wr->field_nomenklatura->field_1c_id->value(),
    'artikul_1c' => $query_wr->field_nomenklatura->field_oc_artikul->value(),
    'volume' => $query_wr->field_qty->value(),
    'status_manager' => $query_wr->field_query_status_manager->value(),
    'period_begin' => date('d.m.Y', $query_wr->field_query_period->value->value()),
    'period_end' => date('d.m.Y', $query_wr->field_query_period->value2->value()),
    'comment' => $query_wr->field_comment->value(),
    'load' => [],
    'action' => '',
  ];
  if ($query_wr->field_query_reason->value()) {
    $params['reason_1c'] = 'нужен словарь';
  }

  $query_json = drupal_json_encode($query_arr);
  $filename = 'query_export_' . $query_arr['id'] . '.json';
  $directory = 'private://exchange/';
  file_prepare_directory($directory, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
  file_unmanaged_save_data($query_json, $directory . $filename, $replace = FILE_EXISTS_RENAME);
}

/**
 * вернуть утверждённую Плановую Заявку
 */
function production_query_approved_plan_get($month_start)
{
  $fid = drupal_hash_base64(__FUNCTION__ . $month_start);
  $result = &drupal_static($fid);

  if (!isset($result)) {
    $efQuery = new EntityFieldQuery();
    $efResult = $efQuery
      ->entityCondition('entity_type', 'query')
      ->fieldCondition('field_month', 'value', $month_start)
      ->fieldCondition('field_query_type', 'value', 'plan')
      ->fieldCondition('field_query_status_client', 'value', 'approved')
      ->fieldCondition('field_query_status_manager', 'value', 'approved')
      ->execute();

    if ($efResult) {
      $entities = entity_load('query', [reset($efResult['query'])->id]);
    }
    $result = empty($entities) ? false: reset($entities);
  }

  return $result;
}

/**
 * Вернуть актуальную Заявку месяца по Номенклатуре
 * $date - можно задать дату, на которую Заявка должна быть актуальна
 */
function production_query_get_actual($month_start, $nom_tid, $date = null)
{
  $fid = drupal_hash_base64(__FUNCTION__  . $month_start . $nom_tid . ($date ? $date : ''));
  $result = &drupal_static($fid);

  if (!isset($result)) {
    $efQuery = new EntityFieldQuery();
    $efQuery->entityCondition('entity_type', 'query');
    $efQuery->fieldCondition('field_month', 'value', $month_start);
    $efQuery->fieldCondition('field_nomenklatura', 'target_id', $nom_tid);
    $efQuery->fieldCondition('field_query_status_manager', 'value', 'approved');
    if ($date) {
      $efQuery->propertyCondition('created', $date, '<=');
    }
    $efQuery->propertyOrderBy('id', 'DESC');
    $efQuery->range(0, 1);
    $efResult = $efQuery->execute();

    if ($efResult) {
      $entities = entity_load('query', [reset($efResult['query'])->id]);
    }
    $result = empty($entities) ? false: reset($entities);
  }

  return $result;
}

/**
 * - Загрузка установок в заявке ---------------------------------------------------------------------------------------
 */

/**
 * Вернуть начало и конец производства
 */
function production_query_load_get_period($load_arr)
{
  $date_start = $date_end = 0;
  foreach ($load_arr as $p_unit) {
    foreach ($p_unit['pu_load'] as $date => $load) {
      if (!$date_start || $date_start > $date) $date_start = $date;
      if ($date_end < $date) $date_end = $date;
    }
  }

  return [
    'start' => $date_start,
    'end' => $date_end,
  ];
}

// суммарная загрузка по дату или вся
//function production_query_load_get_produced($load_arr, $up_to_date = null)
//{
//  if (!isset($up_to_date)) $up_to_date = REQUEST_TIME+10*365*24*60*60;
//  $amount = 0;
//  foreach ($load_arr as $p_unit) {
//    foreach ($p_unit['pu_load'] as $date => $output) {
//      if ($date <= $up_to_date) {
//        $amount += $output;
//      }
//    }
//  }
//  return $amount;
//}

/**
 * - Produce Units ----------------------------------------------------------------------------------------------------
 */
function production_produce_unit_get_info($pu_tid)
{
  $fid = drupal_hash_base64(__FUNCTION__ . $pu_tid);
  $result = &drupal_static($fid);

  if (!isset($result)) {
    $result = [];
    $pu_wr = entity_metadata_wrapper('taxonomy_term', $pu_tid);
    if ($pu_wr->value()) {

      $result = [
        'id' => $pu_tid,
        'name' => $pu_wr->label(),
        'oc_id' => $pu_wr->field_oc_produce_unit_id->value(),
        'status' => $pu_wr->field_status->value(),
      ];
    }
  }

  return $result ?? false;
}

function production_produce_units_get_list()
{
  $vid = taxonomy_vocabulary_machine_name_load('produce_units')->vid;
  $query = new EntityFieldQuery();
  $terms = $query
    ->entityCondition('entity_type', 'taxonomy_term')
    ->propertyCondition('vid', $vid)
    ->execute();

  if ($terms) {
    $entities = entity_load('taxonomy_term', array_keys($terms['taxonomy_term']));
  }
  return empty($entities) ? false: $entities;
}

function production_produce_units_get_from_query_json($query)
{
  $produce_units = [];
  $query_wr = entity_metadata_wrapper('query', $query);
  $load_arr = drupal_json_decode($query_wr->field_load_json->value());

  foreach ($load_arr as $p_unit) {
    $punit_wr = entity_metadata_wrapper('taxonomy_term', $query);
    $pu_tid = $p_unit['pu_tid'];
    $produce_units[$pu_tid] = [
      'tid' => $pu_tid,
      'name' => $punit_wr->label(),
      'performance' => 0,
    ];

    // определить максимальную производительность Запросе
    foreach ($p_unit['pu_load'] as $output) {
      if ($produce_units[$pu_tid]['performance'] < $output) {
        $produce_units[$pu_tid]['performance'] = $output;
      }
    }
  }
  ksort($produce_units);

  return $produce_units;
}

function production_produce_unit_get_by_1c_id($produce_unit_1cID)
{
  $vid = taxonomy_vocabulary_machine_name_load('produce_units')->vid;
  $query = new EntityFieldQuery();
  $terms = $query
    ->entityCondition('entity_type', 'taxonomy_term')
    ->propertyCondition('vid', $vid)
    ->fieldCondition('field_oc_produce_unit_id', 'value', $produce_unit_1cID)
    ->execute();
  if ($terms) {
    // если найдено несколько, это ошибка. записать в лог
    if (count($terms) > 1) {
      watchdog('import', 'Найдено несколько записей Установок по 1с ID: @id', ['@id' => $produce_unit_1cID], WATCHDOG_WARNING);
    }
    $term = reset($terms['taxonomy_term']);
  } else {
    $term = (object)array(
      'vid' => $vid,
      'name' => 'Установка с 1с ID "' . $produce_unit_1cID . '" не импортирована',
      'field_oc_produce_unit_id' => ['und' => [0 => ['value' => $produce_unit_1cID]]],
    );
    taxonomy_term_save($term);
  }
  $entities = entity_load('taxonomy_term', [$term->tid]);

  return empty($entities) ? false: reset($entities);
}

/**
 * Вернуть список Загрузки заданной Установки на заданный месяц
 *
 * field_load_json
 * Содержит загрузку установок только для номенклатуры заявки.
 *
 * field_query_load_snapshot
 * Содержит слепок занятости установок на момент, когда заявка была актуальной.
 * Слепок перезаписывается, пока заявка остаётся актуальной.
 * Так как процесс сборки актуальной занятости установок в заявке затратен по времени,
 * то после потери актуальности занятость извлекается из слепка.
 */
function production_produce_unit_get_load($month_start, $produce_unit_tid = null, $curr_query_id = null)
{
  $today_start = gmmktime(0, 0, 0, date('n'), date('j'), date('Y'));
  $nom_array = [];
  $companies = ext_user_get_companies_by_user();

  $curr_query_date = null;
  $curr_pu_snapshot = [];
  if ($curr_query_id) {
    $curr_query_wr = entity_metadata_wrapper('query', $curr_query_id);
    $curr_query_load = drupal_json_decode($curr_query_wr->field_load_json->value());
    $curr_query_nom_tid = $curr_query_wr->field_nomenklatura->getIdentifier();
    $curr_query_date = $curr_query_wr->created->value();
    $curr_pu_snapshot = drupal_json_decode($curr_query_wr->field_query_load_snapshot->value());
    $curr_query_actual = production_query_get_actual($month_start, $curr_query_nom_tid);
  }


  // определяем Установки и их Загрузку
  // если актуальная Заявка или пустой слепок (состояние установок для Заявки на момент когда она была актуальной)
  if ((!empty($curr_query_actual) && $curr_query_id == $curr_query_actual->id) || !$curr_pu_snapshot) {

    // определить Номенклатуру на месяц
    $nom_list = production_nomenklatura_get_old($month_start, $produce_unit_tid, $curr_query_date);
    if ($nom_list) {
      // собрать актуальные Заявки за заданный месяц для каждой Номенклатуры
      foreach ($nom_list as $nom_item) {
        // Если текущая Заявка задана, то последнюю актуальную определяем не по времени, а по её id (её и берём),
        // так как у соседних заявок может быть одинаковое время created (из-за пакетной загрузки заявок)
        $query_id = null;
        if (isset($curr_query_nom_tid) && $curr_query_nom_tid == $nom_item->nom_tid) {
          $query_id = $curr_query_id;
        } else {
          // Если текущая Заявка актуальная, то актуальную Заявку для НЕ текущей номенклатуры
          // ищем без учёта даты текущей Заявки.
          // т.к для Ном не из текущей Заявки могут существовать более поздние Заявки,
          // занятость по которым тоже нужно учитывать в актуальной Заявке
          if (isset($curr_query_actual) && $curr_query_id == $curr_query_actual->id) {
            $query_actual = production_query_get_actual($month_start, $nom_item->nom_tid);
          } else {
            $query_actual = production_query_get_actual($month_start, $nom_item->nom_tid, $curr_query_date);
          }
          if ($query_actual) {
            $query_id = $query_actual->id;
          }
        }
        if ($query_id) {
          $nom_array[$nom_item->nom_tid] = [
            'nom_tid' => $nom_item->nom_tid,
            'client_id' => $nom_item->client_id,
            'query_id' => $query_id,
          ];
        }
      }
    }

    // определить Установки
  /** структура массива
    $produce_units = [
      '%putid' => [
        'info' => '%pu_info',
        'nom' => [
          '%nom_tid' => '%nom_info',
        ],
        'load' => [
          '%date' => [
            'output' => '%output',
            'own' => '%own',
            'nom_tid' => '%nom_tid',
          ],
        ],
      ],
    ];
 */

    $produce_units = [];
    $produce_units_client = [];
    $produce_units_labels = [];
    if ($nom_array) {
      foreach ($nom_array as $nom_tid => $nom) {
        $query_wr = entity_metadata_wrapper('query', $nom['query_id']);
        if ($load_arr = drupal_json_decode($query_wr->field_load_json->value())) {
          foreach ($load_arr as $pu_tid => $pu) {
            if (!isset($produce_units[$pu_tid])) {
              $produce_units[$pu_tid] = [
                'info' => production_produce_unit_get_info($pu_tid),
                'nom' => [],
                'load' => [],
                'amount' => 0,
              ];
              $produce_units_labels[$produce_units[$pu_tid]['info']['name']] = $pu_tid;
            };
            if (!isset($produce_units[$pu_tid]['nom'][$nom_tid])) {
              $produce_units[$pu_tid]['nom'][$nom_tid] = [
                'info' => production_nomenklatura_get_info($nom_tid),
                'load' => [],
              ];
            };

            foreach ($pu['pu_load'] as $day_start => $output) {
              if (!isset($produce_units[$pu_tid]['load'][$day_start])) {
                $produce_units[$pu_tid]['load'][$day_start] = [
                  'output' => $output,
                  'is_own' => 0,
                  'is_current' => 0,
                  'is_unavailable' => 0,
                  'nom_tid' => $nom_tid,
                ];
              }
              if (user_has_role(ROLE_MANAGER_PRODUCTION) || in_array($nom['client_id'], array_keys($companies))) {
                $produce_units[$pu_tid]['load'][$day_start]['is_own'] = 1;
                $produce_units[$pu_tid]['load'][$day_start]['is_current'] = empty($curr_query_load[$pu_tid]['pu_load'][$day_start]) ? 0 : 1;
                $produce_units[$pu_tid]['amount'] += $output;
                $produce_units[$pu_tid]['nom']['list'][$nom_tid] = $produce_units[$pu_tid]['nom'][$nom_tid]['info']['label'];
                $produce_units_client[$pu_tid] = 1;
              }
              // дата недоступна для выбора в корректирующей Заявке для Клиента до сегодня и ещё спустя DAYS_UNAVAILABLE дней
              // данные могут быть получены из начальной и корректирующей Заявок
              $load['is_unavailable'] =
                !user_has_role(ROLE_MANAGER_PRODUCTION)
                && ($day_start < $today_start + DAYS_UNAVAILABLE * 24 * 60 * 60)
                && (isset($curr_query_id) && $curr_query_id && isset($current_query_type) && in_array($current_query_type, ['request', 'plan', 'correction']));
            }
          }
        }
      }
    }

    // определить последнюю сервисную заявку
    $dbr = db_select('eck_query', 'q');
    $dbr->addField('q', 'id');
    $dbr->innerJoin('field_data_field_month', 'fm', 'fm.entity_id = q.id');
    $dbr->condition('fm.field_month_value', $month_start);
    $dbr->innerJoin('field_data_field_query_type', 'ft', 'ft.entity_id = q.id');
    $dbr->condition('ft.field_query_type_value', 'service');
    // Для актуальной Заявки ищем Сервисную без учёта даты актуальной заявки,
    // т.к. занятость могла измениться
    if ($curr_query_date && (!isset($curr_query_actual) || $curr_query_id != $curr_query_actual->id)) {
      $dbr->condition('q.created', $curr_query_date, '<=');
    }
    $dbr->orderBy('id', 'DESC');
    $dbr->range(0, 1);
    if ($query_id = $dbr->execute()->fetchField()) {
      $query_wr = entity_metadata_wrapper('query', $query_id);
      $load_arr = drupal_json_decode($query_wr->field_load_json->value());
      foreach ($load_arr as $pu_tid => $pu) {
        if (isset($produce_units[$pu_tid])) {
          if (!isset($produce_units[$pu_tid]['nom'][0])) {
            $produce_units[$pu_tid]['nom'][0]['info'] = production_nomenklatura_get_info(0);
          }
          foreach ($pu['pu_load'] as $date => $output) {
            if (!isset($produce_units[$pu_tid]['load'][$date])) {
              $produce_units[$pu_tid]['load'][$date] = [
                'output' => 0,
                'is_own' => 0,
                'is_current' => 0,
                'is_unavailable' => 0,
                'nom_tid' => 0,
              ];
            }
          }
        }
      }
    }

    // исключить установки, где нет клиентской Номенклатуры
    $pu_copy = $produce_units;
    foreach ($pu_copy as $pu_tid => $item) {
      if (empty($produce_units_client[$pu_tid])) unset($produce_units[$pu_tid]);
    }

    if ($curr_query_id) {
      $curr_query_wr->field_query_load_snapshot = drupal_json_encode($produce_units);
      $curr_query_wr->save();
    }

    // отсортировать по названию установки
    ksort($produce_units_labels);
    $produce_units_copy = $produce_units;
    $produce_units = [];
    foreach ($produce_units_labels as $label => $pu_tid) {
      if (isset($produce_units_copy[$pu_tid])) {
        $produce_units[$pu_tid] = $produce_units_copy[$pu_tid];
      }
    }

  } else {
    $produce_units = $curr_pu_snapshot;
  }

  // определить классы
  foreach ($produce_units as $pu_tid => &$pu_item_ptr) {
    $amount = 0;
    foreach ($pu_item_ptr['load'] as $day_start => &$load_ptr) {
      $classes = [];
      if ($load_ptr['is_own'] && !$load_ptr['is_current']) {
        $classes[] = 'company-loaded';
      } else {
        if (!$load_ptr['is_current']) $classes[] = 'loaded';
      }

      if ($load_ptr['is_current']) $classes[] = 'selected';
      if ($load_ptr['is_unavailable'] && !$load_ptr['is_current']) $classes[] = 'unavailable';
      $load_ptr['classes'] = $classes;

      $amount += $load_ptr['output'];
    }
  }

  return $produce_units;
}

/**
 * ----- операции с ПЛАНом ---------------------------------------------------------------------------------------------
 */
function production_plan_delete_all($month_start, $delete_approved = false)
{
  if ($month_start) {
    $efquery = new EntityFieldQuery();
    $efquery
      ->entityCondition('entity_type', 'query')
      ->fieldCondition('field_month', 'value', $month_start)
      ->fieldCondition('field_query_type', 'value', 'plan');

    if (!$delete_approved) {
      $efquery->fieldCondition('field_query_status_client', 'value', 'approved', '<>');
    }

    $result = $efquery->execute();
    if ($result) {
      entity_delete_multiple('query', array_keys($result['query']));
    }
  }
}

/**
 * Implements hook_theme().
 */
function production_theme()
{
  return [
    'nomenkaltura_teaser' => [
      'variables' => ['nom_info' => NULL],
    ],
    'produce_unit_load' => [
      'variables' => ['produce_unit' => NULL, 'month_start' => null, 'notification' => null, 'show_amount' => null, 'show_nomenklatura' => null],
    ],
  ];
}

function theme_nomenkaltura_teaser($vars)
{
  $output = '<div class="nom-item">' . $vars['nom_info']['label'] . '</div>';

  return $output;
}
function theme_produce_unit_load($vars)
{
  $month_start = $vars['month_start'];
  $notification = isset($vars['notification']) ? $vars['notification'] : '';
  $produce_unit = $vars['produce_unit'];
  $pu_name = $produce_unit['info']['name'];
  $load = $produce_unit['load'];

  $days = '';
  for ($i = 1; $i <= date("t", $month_start); $i++) {
    $day_start = $month_start + ($i - 1) * 60 * 60 * 24;

    $classes = []; $tooltip = '';
    if (!empty($load[$day_start])) {
      $classes = $load[$day_start]['classes'];
      $nam_name = $produce_unit['nom'][$load[$day_start]['nom_tid']]['info']['label'];

      $title = str_replace('"', '', $nam_name) . ($load[$day_start]['output'] ? '<br />' . $load[$day_start]['output'] : '');
      $tooltip = ' data-toggle="tooltip" data-placement="top" data-html="true" title="' . $title . '"';
      $tooltip = empty($load[$day_start]['is_own']) ? '' : $tooltip;
    }
    $days .= '<span class="c-box ' . implode(' ', $classes) . '"' . $tooltip . '>' . $i . '</span>';
  }

  $output =
    '<div class="produce-unit" data-putid="' . $produce_unit['info']['id'] . '">' .
      '<div class="produce-unit-name">' .
        '<label class="label" for="edit-name">Установка</label>' .
        '<h3>' . $pu_name . '</h3>' .
        ($notification ? '<div class="notification" data-toggle="popover" data-trigger="hover" title="Внимание!" data-content="' . $notification . '"></div>' : '') .
      '</div>' .
      '<div class="produce-unit-dates">' .
        '<label class="label">Даты</label>' .
        '<div class="form-checkboxes">' .
           $days .
        '</div>' .
      '</div>';

  if (!empty($vars['show_amount'])) {
    $output .=
      '<div class="produce-unit-aux">' .
        '<label class="label">Общий объём</label>' .
        '<h3>' . number_format($produce_unit['amount'], 0, ',', ' ') . '</h3>' .
      '</div>';
  }
  if (!empty($vars['show_nomenklatura'])) {
    $output .=
      '<div class="produce-unit-nom">' .
          implode('; ', $produce_unit['nom']['list']) .
      '</div>';
  }
  $output .= '</div>';


  return $output;
}

function production_date_select_process_alter(&$element, $form_state, $context)
{
  // заменить короткие месяца на полные
  if (!empty($element["month"]["#options"]) && !empty($element["year"]["#default_value"])) {
    foreach ($element["month"]["#options"] as $key => &$option) {
      $year = $element["year"]["#default_value"];
      if (!empty($form_state["values"]["field_produce_date_value"]["value"]["year"])) {
        $year = $form_state["values"]["field_produce_date_value"]["value"]["year"];
      } elseif (!empty($form_state["values"]["field_month_value"]['year'])) {
        $year = $form_state["values"]["field_month_value"]["value"]["year"];
      }
      if (is_numeric($key) && is_numeric($year)) {
        $option = t(date('F', gmmktime(0, 0, 0, $key, 1, $year)));
      }
    }
  }
}
